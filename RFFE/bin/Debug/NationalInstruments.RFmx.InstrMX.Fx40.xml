<?xml version="1.0" encoding="utf-8"?>
<doc>
   <assembly ninamespaces="NationalInstruments.RFmx.InstrMX">
      <name></name>
   </assembly>
   <members>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAdvanceTriggerType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXAdvanceTriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the advance trigger is a digital edge or a software trigger.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAdvanceTriggerType.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            No advance trigger is configured.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAdvanceTriggerType.DigitalEdge" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DigitalEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The advance trigger is not asserted until a digital edge is detected. The source of the digital edge is specified with the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAdvanceTriggerDigitalEdgeSource(System.String,System.String)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAdvanceTriggerType.Software" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Software" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The advance trigger is not asserted until a software trigger occurs. You can assert the software trigger by calling the RFmxInstr_SendSoftwareEdgeTrigger function.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAutomaticSGSASharedLO" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXAutomaticSGSASharedLO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>
            Specifies whether RFmx automatically configures the signal analyzer to use the LO utilized by the signal generator on the same Vector Signal Transceiver (VST) based on the configured measurements.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAutomaticSGSASharedLO.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>Disables automatically sharing the SG LO with SA.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAutomaticSGSASharedLO.Enabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Enabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>Enables automatically sharing the SG LO with SA, whenever possible.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXCalibrationPlaneEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXCalibrationPlaneEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>
            missing content
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXCalibrationPlaneEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXCalibrationPlaneEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXCalibrationTableType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXCalibrationTableType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>
            missing content
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXCalibrationTableType.ExternalAttenuation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ExternalAttenuation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXCalibrationTableType.SParameter" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SParameter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXClientPrivilegeLevel" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXClientPrivilegeLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>
            missing content
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXClientPrivilegeLevel.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXClientPrivilegeLevel.Monitor" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Monitor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXClientPrivilegeLevel.RevokableControl" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RevokableControl" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXClientPrivilegeLevel.UnrevokableControl" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="UnrevokableControl" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAttributeAuthor" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXAttributeAuthor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>
            missing content
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAttributeAuthor.Unwritten" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Unwritten" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAttributeAuthor.User" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="User" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAttributeAuthor.System" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="System" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAttributeAuthor.InheritedFromGlobal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="InheritedFromGlobal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXInputIsolationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXInputIsolationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether input isolation is enabled.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXInputIsolationEnabled.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the method is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXInputIsolationEnabled.Enabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Enabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the method is enabled.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLinearInterpolationFormat" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXLinearInterpolationFormat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the format of parameters to interpolate.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLinearInterpolationFormat.RealAndImaginary" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RealAndImaginary" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Results in a linear interpolation of the real portion of the complex number and a separate linear interpolation of the complex portion.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLinearInterpolationFormat.MagnitudeAndPhase" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="MagnitudeAndPhase" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Results in a linear interpolation.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLinearInterpolationFormat.Magnitude_dB_AndPhase" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Magnitude_dB_AndPhase" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Results in a linear interpolation.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLO2ExportEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXLO2ExportEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to enable the LO2 OUT terminals in the installed devices.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLO2ExportEnabled.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Disables the LO2 OUT terminals.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLO2ExportEnabled.Enabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Enabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Enables the LO2 OUT terminals.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOLeakageAvoidanceEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXLOLeakageAvoidanceEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to reduce the effects of the instrument leakage by placing the LO outside the band of acquisition.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOLeakageAvoidanceEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>RFmx does not modify the Downconverter Frequency Offset method. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOLeakageAvoidanceEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>RFmx calculates the required LO offset based on the measurement configuration and appropriately sets the Downconverter Frequency Offset method.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOPllFractionalMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXLOPllFractionalMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to use fractional mode for the LO phase-locked loop (PLL).
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOPllFractionalMode.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the method is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOPllFractionalMode.Enabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Enabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the method is enabled.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOSharingMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXLOSharingMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the RFmx session with the respective LO sharing mode.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOSharingMode.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            LO Sharing is disabled.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOSharingMode.OnboardStar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="OnboardStar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOSharingMode.OnboardDaisyChain" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="OnboardDaisyChain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOSharingMode.ExternalStar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="ExternalStar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The LO connection configuration is configured as External Star.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOSharingMode.ExternalDaisyChain" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="ExternalDaisyChain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The LO connection configuration is configured as External Daisy Chain.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOptimizePathForSignalBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXOptimizePathForSignalBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Optimizes RF path for the signal bandwidth that is centered on the IQ carrier frequency.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOptimizePathForSignalBandwidth.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Disables the optimized path for signal bandwidth.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOptimizePathForSignalBandwidth.Enabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Enabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Enables the optimized path for signal bandwidth.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOptimizePathForSignalBandwidth.Automatic" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Automatic" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Automatically enables the optimized path based on other configurations.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOverflowErrorReporting" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXOverflowErrorReporting" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Configures error reporting for ADC and overflows occurred during onboard signal processing. Overflows lead to clipping of the waveform.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOverflowErrorReporting.Warning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Warning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>RFmx returns a warning when an ADC or an onboard signal processing (OSP) overflow occurs.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOverflowErrorReporting.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary> RFmx does not return an error or a warning when an ADC or OSP overflow occurs.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXPersonalities" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the personality of the signal if the signal exists.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that a signal does not exist.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.SpecAn" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SpecAn" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the SpecAn personality.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.Demod" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Demod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the Demod personality.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.Lte" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Lte" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the LTE personality.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.Gsm" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Gsm" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the GSM personality.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.Wcdma" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Wcdma" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the WCDMA personality.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.Cdma2k" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Cdma2k" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the CDMA2k personality.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.Tdscdma" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Tdscdma" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the TD-SCDMA personality.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.Evdo" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Evdo" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the EV-DO personality.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.NR" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="NR" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the NR personality.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.Wlan" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Wlan" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the WLAN personality.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.BT" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="BT" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the BT personality.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.Vna" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Vna" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the VNA personality.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.Uwb" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Uwb" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the UWB personality.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities.All" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="All" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies all the personalities.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXPowerUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>
            missing content
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits.dBm" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="dBm" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits.dBW" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="dBW" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits.dBV" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="dBV" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits.dBmV" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="dBmV" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits.dBuV" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="dBuV" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits.W" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="W" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits.Volts" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Volts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits.VoltsSquared" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="VoltsSquared" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits.Vpp" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Vpp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXPropertyId" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies all the attribute identifiers.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FrequencyReferenceSource" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="FrequencyReferenceSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the frequency reference source.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FrequencyReferenceFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="FrequencyReferenceFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the Reference Clock rate, when the Frequency Reference Source method is set to ClkIn or RefIn. This value is expressed in Hz. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFAttenuationAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFAttenuationAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether RFmx computes the RF attenuation. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFAttenuationValue" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFAttenuationValue" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the nominal attenuation setting for all attenuators before the first mixer in the RF signal chain. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.MechanicalAttenuationAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="MechanicalAttenuationAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether RFmx chooses an attenuation setting based on the hardware settings. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.MechanicalAttenuationValue" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="MechanicalAttenuationValue" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the level of mechanical attenuation for the RF path. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LO2ExportEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LO2ExportEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the LO2 OUT terminals in the installed devices.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.TuningSpeed" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="TuningSpeed" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Makes tradeoffs between tuning speed and phase noise.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FrequencySettlingUnits" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="FrequencySettlingUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the delay duration units and interpretation for LO settling.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FrequencySettling" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="FrequencySettling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the value used for LO frequency settling.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ChannelCoupling" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ChannelCoupling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the RF IN connector is AC- or DC-coupled on the downconverter. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DownconverterPreselectorEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DownconverterPreselectorEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the tunable preselector is enabled on the downconverter.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DownconverterCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DownconverterCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Enables in-band retuning and specifies the current frequency of the RF downconverter. This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.PreampEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PreampEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the RF preamplifier is enabled in the system.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.MixerLevelOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="MixerLevelOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of dB by which to adjust the device mixer level.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.MixerLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="MixerLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the mixer level. This value is expressed in dBm. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.IFOutputPowerLevelOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="IFOutputPowerLevelOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the power offset by which to adjust the default IF output power level. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the LO signal frequency for the configured center frequency. This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOSource" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the local oscillator (LO) signal source used to downconvert the RF input signal.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOInjectionSide" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOInjectionSide" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Enables in-band retuning and specifies the current frequency of the RF downconverter. This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.PhaseOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PhaseOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the offset to apply to the initial I and Q phases.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DigitizerDitherEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DigitizerDitherEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether dithering is enabled on the digitizer.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FftWidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="FftWidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the FFT width of the device. The FFT width is the effective bandwidth of the signal path during each signal acquisition. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.OspDelayEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="OspDelayEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the digitizer OSP block to delay Reference Triggers, along with the data samples, moving through the OSP block. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DeviceTemperature" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DeviceTemperature" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the current temperature of the module. This value is expressed in degrees Celsius.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DigitizerTemperature" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DigitizerTemperature" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the current temperature of the digitizer module. This value is expressed in degrees Celsius.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOTemperature" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOTemperature" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the current temperature of the LO module associated with the device. This value is expressed in degrees Celsius.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.InstrumentFirmwareRevision" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="InstrumentFirmwareRevision" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns a string containing the firmware revision information of the RF downconverter for the composite device you are currently using.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.InstrumentModel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="InstrumentModel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns a string that contains the model number or name of the RF device that you are currently using.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ModuleRevision" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ModuleRevision" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the revision of the RF downconverter module.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SerialNumber" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SerialNumber" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the serial number of the RF downconverter module.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.PreselectorPresent" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PreselectorPresent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates whether a preselector is available on the RF downconverter module. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFPreampPresent" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFPreampPresent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates whether an RF preamplifier is available on the RF downconverter module. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOExportEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOExportEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the LO OUT terminals on the installed devices.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FrequencyReferenceExportedTerminal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="FrequencyReferenceExportedTerminal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a comma-separated list of the terminals at which to export the frequency reference.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.TriggerExportOutputTerminal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="TriggerExportOutputTerminal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the destination terminal for the exported Reference Trigger. You can also choose not to export any signal.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.TriggerTerminalName" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="TriggerTerminalName" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the fully qualified signal name as a string.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.CleanerSpectrum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="CleanerSpectrum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies how to obtain the lowest noise floor or faster measurement speed.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RecommendedCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the recommended center frequency of the RF signal. This value is expressed in Hz.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this property.<br/>
      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedAcquisitionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RecommendedAcquisitionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the recommended acquisition type for the last committed measurement configuration.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this property.<br/>
      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedNumberOfRecords" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RecommendedNumberOfRecords" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the recommended number of records to acquire to complete measurement averaging.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this property.<br/>
      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedTriggerMinimumQuietTime" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RecommendedTriggerMinimumQuietTime" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the recommended minimum quiet time during which the signal level must be below the trigger value for triggering to occur. This value is expressed in seconds.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this property.<br/>
      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedIQAcquisitionTime" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RecommendedIQAcquisitionTime" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the recommended acquisition time for I/Q acquisition. This value is expressed in seconds.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this property.<br/>
      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedIQMinimumSampleRate" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RecommendedIQMinimumSampleRate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the recommended minimum sample rate for I/Q acquisition. This value is expressed in Hz.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this property.<br/>
      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedIQPreTriggerTime" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RecommendedIQPreTriggerTime" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the recommended pretrigger time for I/Q acquisition. This value is expressed in seconds. <br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this property.<br/>
      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedSpectralAcquisitionSpan" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RecommendedSpectralAcquisitionSpan" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the recommended acquisition span for spectral acquisition. This value is expressed in Hz.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this property.<br/>
      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedSpectralFftWindow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RecommendedSpectralFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the recommended FFT window type for spectral acquisition.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this property.<br/>
      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedSpectralResolutionBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RecommendedSpectralResolutionBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the recommended FFT bin width for spectral acquisition. This value is expressed in Hz.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this property.<br/>
      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.IFFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="IFFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the IF filter path bandwidth for your device configuration.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SubSpanOverlap" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SubSpanOverlap" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering silly.For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this method returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DownconverterGain" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DownconverterGain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the net signal gain for the device at the current RFmx settings and temperature. RFmx scales the acquired I/Q and spectrum data from the digitizer using the value of this method.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedIQMeasurementBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RecommendedIQMeasurementBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DownconverterFrequencyOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DownconverterFrequencyOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies an offset from the center frequency value for the downconverter. Use this method to offset the measurement away from the LO leakage or DC Offset of analyzers that use a direct conversion architecture.  You must set this method to half the bandwidth or span of the measurement + guardband. The guardband is needed to ensure that the LO leakage is not inside the analog or digital filter rolloffs.  This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFAttenuationStepSize" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFAttenuationStepSize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the step size for the RF attenuation level. This value is expressed in dB. The actual RF attenuation is coerced up to the next highest multiple of the specified step size. If the mechanical attenuators are not available to implement the coerced RF attenuation, the solid state attenuators are used. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOLeakageAvoidanceEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOLeakageAvoidanceEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to reduce the effects of the instrument leakage by placing the LO outside the band of acquisition.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AmplitudeSettling" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="AmplitudeSettling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the amplitude settling accuracy value. This value is expressed in decibels. RFmx waits until the RF power attains the specified accuracy level after calling the RFmx Initiate function.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.IQFrequencyOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="IQFrequencyOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.CommonModeLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="CommonModeLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the common-mode level presented at each differential input terminal. The common-mode level shifts both positive and negative terminals in the same direction. This must match the common-mode level of the device under test (DUT). This value is expressed in Volts. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SmuResourceName" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SmuResourceName" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the resource name assigned by Measurement and Automation Explorer (MAX) for NI Source Measure Units (SMU) which is used  as the noise source power supply for Noise Figure (NF) measurement, for example, PXI1Slot3, where PXI1Slot3 is an instrument resource name. SMU Resource Name can also be a logical IVI name.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SmuChannel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SmuChannel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the output channel to be used for noise figure (NF) measurement in RFmx.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AutomaticSGSASharedLO" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="AutomaticSGSASharedLO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>Specifies whether RFmx automatically configures the signal analyzer to use the LO utilized by the signal generator on the same Vector Signal Transceiver (VST) based on the configured measurements. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.OverflowErrorReporting" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="OverflowErrorReporting" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Configures error reporting for ADC and overflows occurred during onboard signal processing. Overflows lead to clipping of the waveform.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOInPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOInPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the power level expected at the LO IN terminal when the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOSource(System.String,System.String)" crefType="FullyQualified" /> method is set to RFMXINSTR_VAL_LO_SOURCE_LO_IN. This value is expressed in dBm.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOOutPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOOutPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the power level of the signal at the LO OUT terminal when the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOExportEnabled(System.String,System.Boolean)" crefType="FullyQualified" /> method is set to TRUE. This value is expressed in dBm.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOPllFractionalMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOPllFractionalMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies whether to use fractional mode for the LO phase-locked loop (PLL).      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.OptimizePathForSignalBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="OptimizePathForSignalBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Optimizes RF path for the signal bandwidth that is centered on the IQ carrier frequency.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.InputIsolationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="InputIsolationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies whether input isolation is enabled.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOVcoFrequencyStepSize" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOVcoFrequencyStepSize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the step size for tuning the internal voltage-controlled oscillator (VCO) used to generate the LO signal. The valid values for LO1 include 1 Hz to 50 MHz and for LO2 include 1 Hz to 100 MHz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ThermalCorrectionHeadroomRange" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ThermalCorrectionHeadroomRange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the expected thermal operating range of the instrument from the self-calibration temperature returned from the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDeviceTemperature(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in degree Celsius.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOFrequencyStepSize" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOFrequencyStepSize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies the step size for tuning the LO phase-locked loop (PLL).      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFHighpassFilterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFHighpassFilterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering silly.For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this method returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SelfCalibrationValidityCheck" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SelfCalibrationValidityCheck" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>            Specifies whether RFmx validates the self-calibration data.             </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SelfCalibrationValidityCheckTimeInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SelfCalibrationValidityCheckTimeInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>            Specifies the minimum time between two self calibration validity checks. This value is expressed in seconds.            </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DigitalGain" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DigitalGain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>            Specifies the scaling factor applied to the time-domain voltage data in the digitizer. This value is expressed in dB.            </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="StartTriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>     Specifies whether the start trigger is a digital edge or a software trigger.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerDigitalEdgeSource" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="StartTriggerDigitalEdgeSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the source terminal for the start trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerDigitalEdge" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="StartTriggerDigitalEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the active edge for the start trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerExportOutputTerminal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="StartTriggerExportOutputTerminal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies the destination terminal for the exported start trigger.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerTerminalName" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="StartTriggerTerminalName" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Returns the fully qualified signal name as a string.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AdvanceTriggerType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="AdvanceTriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies whether the advance trigger is a digital edge or a software trigger.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AdvanceTriggerDigitalEdgeSource" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="AdvanceTriggerDigitalEdgeSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies the source terminal for the advance trigger.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AdvanceTriggerExportOutputTerminal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="AdvanceTriggerExportOutputTerminal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies the destination terminal for the exported advance trigger.       </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AdvanceTriggerTerminalName" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="AdvanceTriggerTerminalName" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the fully qualified signal name as a string.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForStartEventOutputTerminal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReadyForStartEventOutputTerminal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies the destination terminal for the Ready for Start event.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForStartEventTerminalName" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReadyForStartEventTerminalName" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Returns the fully qualified signal name as a string.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForAdvanceEventOutputTerminal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReadyForAdvanceEventOutputTerminal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies the destination terminal for the Ready for Advance event.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForAdvanceEventTerminalName" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReadyForAdvanceEventTerminalName" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Returns the fully qualified signal name as a string.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForReferenceEventOutputTerminal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReadyForReferenceEventOutputTerminal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies the destination terminal for the Ready for Reference event.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForReferenceEventTerminalName" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReadyForReferenceEventTerminalName" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Returns the fully qualified signal name as a string.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.EndOfRecordEventOutputTerminal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="EndOfRecordEventOutputTerminal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies the destination terminal for the End of Record event.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.EndOfRecordEventTerminalName" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="EndOfRecordEventTerminalName" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Returns the fully qualified signal name as a string.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DoneEventOutputTerminal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DoneEventOutputTerminal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies the destination terminal for the Done event.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DoneEventTerminalName" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DoneEventTerminalName" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Returns the fully qualified signal name as a string.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.TemperatureReadInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="TemperatureReadInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies the minimum time difference between temperature sensor readings. This value is expressed in seconds.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ThermalCorrectionTemperatureResolution" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ThermalCorrectionTemperatureResolution" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies the temperature change required before RFmx recalculates the thermal correction settings when entering the running state. This value is expressed in degree Celsius.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DeviceSynchronizationMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="DeviceSynchronizationMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOSharingMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="LOSharingMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies the RFmx session with the respective LO sharing mode.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.NumberOfLOSharingGroups" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="NumberOfLOSharingGroups" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>      Specifies the RFmx session with the number of LO sharing groups.      </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.ISignalConfiguration" nitypekind="Interface" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ISignalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Represents a signal configuration. Implement this interface to expose measurement functionality.
         </summary>
         <remarks>For more information about RFmx Instruments, refer to RFmx Instruments Help.</remarks>

      </member>
      <member name="P:NationalInstruments.RFmx.InstrMX.ISignalConfiguration.SignalConfigurationType" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SignalConfigurationType" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Type">

         <summary>
            Gets the type of the current signal configuration object.
         </summary>
         <value>Specifies the type of signal configuration.</value>

      </member>
      <member name="P:NationalInstruments.RFmx.InstrMX.ISignalConfiguration.SignalConfigurationName" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SignalConfigurationName" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">

         <summary>
            Gets the name assigned to the current signal configuration object.
         </summary>
         <value>Specifies the signal configuration name.</value>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.IList" nitypekind="Interface" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="IList" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Represents a list. Implement this interface to expose measurement functionality.
         </summary>
         <remarks>For more information about RFmx Instruments, refer to RFmx Instruments Help.</remarks>

      </member>
      <member name="P:NationalInstruments.RFmx.InstrMX.IList.ListType" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ListType" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Type">

         <summary>
            Gets the type of the current list object.
         </summary>
         <value>Specifies the type of list.</value>

      </member>
      <member name="P:NationalInstruments.RFmx.InstrMX.IList.ListName" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ListName" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">

         <summary>
            Gets the name assigned to the current list object.
         </summary>
         <value>Specifies the list name.</value>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxException" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxException" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Represents errors that occur during RFmx application execution.
         </summary>
         <threadsafety safety="safe"/>
         <remarks>For more information about RFmx Instruments, refer to RFmx Instruments help.</remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxException.#ctor" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxException" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.RFmx.InstrMX.RFmxException"/> class.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxException.#ctor(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxException" nihasget="0" nihasset="0" niparameters="message" niparametertypes="System.String" nireturnvaluetype="">

         <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.RFmx.InstrMX.RFmxException"/> class with a specified error message.
         </summary>
         <param name="message">The message that describes the error.</param>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxException.#ctor(System.String,System.Exception)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxException" nihasget="0" nihasset="0" niparameters="message,innerException" niparametertypes="System.String,System.Exception" nireturnvaluetype="">

         <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.RFmx.InstrMX.RFmxException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
         </summary>
         <param name="message">Specifies the message that describes the error.</param>
         <param name="innerException">Contains the  reference to the inner exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxException" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="">

         <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.RFmx.InstrMX.RFmxException"/> class with serialized data.
         </summary>
         <param name="info">
            Specifies the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized
            object data about the exception being thrown.
         </param>
         <param name="context">
            Specifies the <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual
            information about the source or destination.
         </param>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">

         <summary>
            Gets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.
         </summary>
         <param name="info">
            Specifies the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized
            object data about the exception being thrown.
         </param>
         <param name="context">
            Specifies the <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual
            information about the source or destination.
         </param>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMX" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMX" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Defines a root class which is used to identify and control Instr signal configuration.</summary>
         <remarks>For more information about RFmx Instruments, refer to RFmx Instruments Help.</remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.IntPtr)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMX" nihasget="0" nihasset="0" niparameters="instrumentHandle" niparametertypes="System.IntPtr" nireturnvaluetype="">

         <summary>
            Creates a new RFmx session from an existing RFmx instrument handle.
         </summary>
         <param name="instrumentHandle">Specifies the pre-existing instrument handle used to create a new RFmx session.</param>
         <remarks>
            When you use an existing instrument handle to create a session; calling the Dispose, Close, or ForceClose methods will only dispose the .NET resources associated with this session. The pre-existing instrument handle will NOT be released.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMX" nihasget="0" nihasset="0" niparameters="resourceName,optionString" niparametertypes="System.String,System.String" nireturnvaluetype="">

         <summary>
            Creates an RFmx session to the device you specify through the resourceName parameter. <note type="note">
               Enabling the SFP (Soft Front Panel) debug has a performance impact. For best performance, NI recommends disabling SFP debug. SFP debug can be enabled/disabled from either the RF Signal Analyzer panel in InstrumentStudio, the RFSA Soft Front Panel, or the RFmx Debug Configuration Utility.
                 </note>
         </summary>
         <param name="resourceName">Specifies the resource name of the device to initialize.</param>
         <param name="optionString">
            Sets the initial value of certain properties for the session.<br/> The following attributes are used in this parameter: <list type="bullet">
               <item>
                  <description>
                     RFmxSetup
                  </description>
               </item>
               <item>
                  <description>
                     Simulate
                  </description>
               </item>
               <item>
                  <description>
                     AnalysisOnly
                  </description>
               </item>
            </list>
            To simulate a device using the PXIe-5622 (25 MHz) digitizer, set the Digitizer field to 5622_25MHz_DDC and the Simulate field to 1. You can set the Digitizer field to 5622_25MHz_DDC only when using the PXIe-5665. <br/>
            To use AnalysisOnly mode, specify the string as "AnalysisOnly=1". While using this mode, you are responsible for waveform acquisition and RFmx will perform analysis on the I/Q waveform or Spectrum you specify. You must use personality specific Analyze functions to perform the measurements. To use external NI Source Measure Units (SMU) as the noise source power supply for the Noise Figure (NF) measurement, use "NoiseSourcePowerSupply" as the specifier within the RFmxSetup string.
            For example, "RFmxSetup= NoiseSourcePowerSupply:myDCPower[0]" configures RFmx to use channel 0 on myDCPower SMU device for powering the noise source. You should allocate a dedicated SMU channel for RFmx.
            RFmx supports PXIe-4138, PXIe-4139, and PXIe-4139 (40 W) SMUs.
         </param>
         <remarks>To set multiple attributes, separate their assignments with a comma.</remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMX" nihasget="0" nihasset="0" niparameters="resourceName,optionString" niparametertypes="System.String[],System.String" nireturnvaluetype="">

         <summary>
            Creates an RFmx session to the device you specify through the resourceName parameter. <note type="note">
               Enabling the SFP (Soft Front Panel) debug has a performance impact. For best performance, NI recommends disabling SFP debug. SFP debug can be enabled/disabled from either the RF Signal Analyzer panel in InstrumentStudio, the RFSA Soft Front Panel, or the RFmx Debug Configuration Utility.
                 </note>
         </summary>
         <param name="resourceName">Specifies the resource names of the device to initialize.</param>
         <param name="optionString">
            Sets the initial value of certain properties for the session.<br/> The following attributes are used in this parameter: 
            <list type="bullet">
               <item>
                  <description>
                     RFmxSetup
                  </description>
               </item>
               <item>
                  <description>
                     Simulate
                  </description>
               </item>
               <item>
                  <description>
                     AnalysisOnly
                  </description>
               </item>
            </list>
            To simulate a device using the PXIe-5622 (25 MHz) digitizer, set the Digitizer field to 5622_25MHz_DDC and the Simulate field to 1. You can set the Digitizer field to 5622_25MHz_DDC only when using the PXIe-5665. <br/>
            To use AnalysisOnly mode, specify the string as "AnalysisOnly=1;MaxNumWfms:n", where "n" represents the maximum number of waveforms that can be used for the MIMO measurement. While using this mode, you are responsible for waveform acquisition and RFmx will perform analysis on the I/Q waveform(s) or Spectrum(s) you specify. You must use personality specific Analyze functions to perform the measurements. To use external NI Source Measure Units (SMU) as the noise source power supply for the Noise Figure (NF) measurement, use "NoiseSourcePowerSupply" as the specifier within the RFmxSetup string.
            For example, "RFmxSetup= NoiseSourcePowerSupply:myDCPower[0]" configures RFmx to use channel 0 on myDCPower SMU device for powering the noise source. You should allocate a dedicated SMU channel for RFmx.
            RFmx supports PXIe-4138, PXIe-4139, and PXIe-4139 (40 W) SMUs.
         <remarks>To set multiple attributes, separate their assignments with a comma.</remarks>
         </param>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetOverflowErrorReporting(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXOverflowErrorReporting@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetOverflowErrorReporting" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXOverflowErrorReporting" nireturnvaluetype="System.Int32">

         <summary>
            Configures error reporting for ADC and overflows occurred during onboard signal processing. Overflows lead to clipping of the waveform.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Configures error reporting for ADC and overflows occurred during onboard signal processing. Overflows lead to clipping of the waveform.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.OverflowErrorReporting" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOverflowErrorReporting.Warning" crefType="PartiallyQualified" />.Supported devices: PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetOverflowErrorReporting(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXOverflowErrorReporting)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetOverflowErrorReporting" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXOverflowErrorReporting" nireturnvaluetype="System.Int32">

         <summary>
            Configures error reporting for ADC and overflows occurred during onboard signal processing. Overflows lead to clipping of the waveform.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Configures error reporting for ADC and overflows occurred during onboard signal processing. Overflows lead to clipping of the waveform.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.OverflowErrorReporting" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOverflowErrorReporting.Warning" crefType="PartiallyQualified" />.Supported devices: PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ConfigureExternalAttenuationInterpolationNearest(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ConfigureExternalAttenuationInterpolationNearest" nihasget="0" nihasset="0" niparameters="selectorString,tableName" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Selects the nearest interpolation method when interpolating S-parameters for a specified table. The parameters of the table nearest to the carrier frequency are used.<br />
            Currently interpolation is supported only for S-parameter tables.

            <em>supporteddevices</em>: PXIe-5663/5663E, PXIe-5665, PXIe-5668, PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5860<br />
         </summary>
         <param name="selectorString">
            Specifies the calibration plane name in which the external attenuation table is stored. This input accepts the calibration plane name with the "calplane::" prefix. If you do not specify the calibration plane name, the default calibration plane instance is used. The default value is "" (empty string).
            <note> For PXIe-5830/5831/5832 devices, port names should also be specified along with Calplane names. Hence, the valid selector is "calplane::&lt;calplaneName&gt;/port::&lt;portName&gt;". If you specify "port::all", all ports are  considered configured. Use RFmxInstrMX.GetAvailablePorts method to get the valid port names.</note>
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::if0"</format>
            </para>
            <para>
               <format type="monospace">"port::if0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::all"</format>
            </para>
         </param>
         <param name="tableName">
            Specifies the name to be associated with either the S-parameter table or the external attenuation table within a calibration plane. Provide a unique name, such as <span class="monospace">"table1"</span> to configure the table.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ConfigureExternalAttenuationInterpolationLinear(System.String,System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLinearInterpolationFormat)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ConfigureExternalAttenuationInterpolationLinear" nihasget="0" nihasset="0" niparameters="selectorString,tableName,format" niparametertypes="System.String,System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLinearInterpolationFormat" nireturnvaluetype="System.Int32">

         <summary>
            Selects the linear interpolation method when interpolating S-parameters for the specified table. If the carrier frequency does not match a row in the S-parameter table, this method performs a linear interpolation based on the entries above and below the row in the table.<br />
            Currently interpolation is supported only for S-parameter tables.

            <em>supporteddevices</em>: PXIe-5663/5663E, PXIe-5665, PXIe-5668, PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842/5860<br />
         </summary>
         <param name="selectorString">
            Specifies the calibration plane name in which the external attenuation table is stored. This input accepts the calibration plane name with the "calplane::" prefix. If you do not specify the calibration plane name, the default calibration plane instance is used. The default value is "" (empty string).
            <note> For PXIe-5830/5831/5832 devices, port names should also be specified along with Calplane names. Hence, the valid selector is "calplane::&lt;calplaneName&gt;/port::&lt;portName&gt;". If you specify "port::all", all ports are  considered configured. Use RFmxInstrMX.GetAvailablePorts method to get the valid port names.</note>
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::if0"</format>
            </para>
            <para>
               <format type="monospace">"port::if0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::all"</format>
            </para>
         </param>
         <param name="tableName">
            Specifies the name to be associated with either the S-parameter table or the external attenuation table within a calibration plane. Provide a unique name, such as <span class="monospace">"table1"</span> to configure the table.
         </param>
         <param name="format">Specifies the format of parameters to interpolate.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ConfigureExternalAttenuationInterpolationSpline(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ConfigureExternalAttenuationInterpolationSpline" nihasget="0" nihasset="0" niparameters="selectorString,tableName" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Selects the spline interpolation method when interpolating parameters for the specified table. If the carrier frequency does not match a row in the S-parameter table, this method performs a spline interpolation based on the entries above and below the row in the table.<br />
            Currently interpolation is supported only for S-parameter tables.

            <em>supporteddevices</em>: PXIe-5663/5663E, PXIe-5665, PXIe-5668, PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842/5860<br />
         </summary>
         <param name="selectorString">
            Specifies the calibration plane name in which the external attenuation table is stored. This input accepts the calibration plane name with the "calplane::" prefix. If you do not specify the calibration plane name, the default calibration plane instance is used. The default value is "" (empty string).
            <note> For PXIe-5830/5831/5832 devices, port names should also be specified along with Calplane names. Hence, the valid selector is "calplane::&lt;calplaneName&gt;/port::&lt;portName&gt;". If you specify "port::all", all ports are  considered configured. Use RFmxInstrMX.GetAvailablePorts method to get the valid port names.</note>
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::if0"</format>
            </para>
            <para>
               <format type="monospace">"port::if0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::all"</format>
            </para>
         </param>
         <param name="tableName">
            Specifies the name to be associated with either the S-parameter table or the external attenuation table within a calibration plane. Provide a unique name, such as <span class="monospace">"table1"</span> to configure the table.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ConfigureSParameterExternalAttenuationTable(System.String,System.String,System.Double[],NationalInstruments.ComplexDouble[0:,0:,0:],NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterOrientation)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSParameterExternalAttenuationTable" nihasget="0" nihasset="0" niparameters="selectorString,tableName,frequency,sParameters,sParameterOrientation" niparametertypes="System.String,System.String,System.Double[],NationalInstruments.ComplexDouble[,,],NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterOrientation" nireturnvaluetype="System.Int32">

         <summary>
            Stores the S-parameter table in the calibration plane specified by the <em>selectorString</em> parameter. On a MIMO session the S-parameter table is stored for each MIMO port in the specified calibration plane.<br /><em>supporteddevices</em>: PXIe-5830/5831/5832/5840/5841/5842/5860<br />
            If there is only one table configured in any calibration plane, it is automatically selected as the active table.

         </summary>
         <param name="selectorString">
            Specifies the calibration plane name in which external attenuation table is stored. This input accepts the calibration plane name with the <format type="monospace">"calplane::"</format> prefix. If you do not specify the calibration plane name, the default calibration plane instance is used.

            On a MIMO session if you do not specify the port name, this configuration is applied to all MIMO ports in the session for the default calibration plane instance. To configure S-parameter external attenuation table for a specific MIMO port, use the port specifier with or without the calplane name. Example: <span class="monospace">"calplane::plane1/port::myrfsa1/0"</span>.
            <br />
            <note> For PXIe-5830/5831/5832 devices, port names should also be specified along with Calplane names. Hence, the valid selector is "calplane::&lt;calplaneName&gt;/port::&lt;portName&gt;". If you specify "port::all", all ports are  considered configured. For a MIMO port, the valid selector string is "calplane::(calplaneName)/port::(deviceName)/(channelNumber)/(portName)". If you specify "port::all", all MIMO ports are considered configured. Use RFmxInstrMX.GetAvailablePorts method to get the valid port names.</note>
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::if0"</format>
            </para>
            <para>
               <format type="monospace">"port::if0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::all"</format>
            </para>
         </param>
         <param name="tableName">
            Specifies the name to be associated with S-parameter table within a calibration plane. Provide a unique name, such as <span class="monospace">"table1"</span> to configure the table.
         </param>
         <param name="frequency">
            Specifies an array of frequencies in the S-parameter table. This value is expressed in Hz.
            <br />
         </param>
         <param name="sParameters">
            Specifies the S-parameters for each frequency. The first index indicates the corresponding frequency entry, the second index corresponds to the target port for the S-parameter, and the third index corresponds to the the source port. For example, to index the s21 parameter for the fourth frequency in the table, you would use {3, 1, 0} as the indexes since they are zero-based.	<br />
         </param>
         <param name="sParameterOrientation">Specifies the orientation of the data in the S-parameter table relative to the port you specify.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.LoadSParameterExternalAttenuationTableFromS2pFile(System.String,System.String,System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterOrientation)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LoadSParameterExternalAttenuationTableFromS2pFile" nihasget="0" nihasset="0" niparameters="selectorString,tableName,s2pFilePath,sParameterOrientation" niparametertypes="System.String,System.String,System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterOrientation" nireturnvaluetype="System.Int32">

         <summary>
            Stores the S-parameter table from the S2P file in the calibration plane specified by the <em>selectorString</em> parameter. S-parameter tables are used for fixture de-embedding. On a MIMO session the S-parameter table is stored for each MIMO port in the specified calibration plane.<br /><em>supporteddevices</em>: PXIe-5830/5831/5832/5840/5841/5842/5860<br />
            If there is only one table configured in any calibration plane, it is automatically selected as the active table.

         </summary>
         <param name="selectorString">
            Specifies the calibration plane name in which the external attenuation table is stored. This input accepts the calibration plane name with the "calplane::" prefix. If you do not specify the calibration plane name, the default calibration plane instance is used.
            <note> For PXIe-5830/5831/5832 devices, port names should also be specified along with Calplane names. Hence, the valid selector is "calplane::&lt;calplaneName&gt;/port::&lt;portName&gt;". If you specify "port::all", all ports are  considered configured. For a MIMO port, the valid selector string is "calplane::&lt;calplaneName&gt;/port::&lt;deviceName&gt;/&lt;channelNumber&gt;/&lt;portName&gt;". If you specify "port::all", all MIMO ports are considered configured. Use RFmxInstr Get Available Ports method to get the valid port names. Use RFmxInstrMX.GetAvailablePorts method to get the valid port names.</note>
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::if0"</format>
            </para>
            <para>
               <format type="monospace">"port::if0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::all"</format>
            </para>
         </param>
         <param name="tableName">
            Specifies the name to be associated with S-parameter table within a calibration plane. Provide a unique name, such as <span class="monospace">"table1"</span> to configure the table.
         </param>
         <param name="s2pFilePath">
            Specifies the path to the S2P file that contains S-parameter table information for the specified port.
            <br />
         </param>
         <param name="sParameterOrientation">Specifies the orientation of the data in the S-parameter table relative to the port you specify.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.IsSelfCalibrateValid(System.String,System.Boolean@,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="IsSelfCalibrateValid" nihasget="0" nihasset="0" niparameters="selectorString,selfCalibrateValid,validSteps" niparametertypes="System.String,out System.Boolean,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps" nireturnvaluetype="System.Int32">

         <summary>
            Returns an array to indicate which calibration steps contain valid calibration data. To omit steps with the valid calibration data from self-calibration, you can pass the <em>validSteps</em> parameter to the <em>stepsToOmit</em> parameter of the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SelfCalibrate(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps)" crefType="FullyQualified" /> method. On a MIMO session use the selectorString parameter to get the self-calibration validity for a specific MIMO port.<br /><em>supporteddevices:</em> PXIe-5663/5663E/5665/5668 <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">Selector String</a> comprising of a MIMO port on a MIMO session. 
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"port::myrfsa1/0"</format>
            </para>
            You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="selfCalibrateValid">
            Upon return, contains TRUE if all the calibration data is valid and FALSE if any of the calibration data is invalid.
            <br />
         </param>
         <param name="validSteps">
            Upon return, contains an array of valid steps.
            <br />
            <list type="table">
               <item>
                  <term>PreselectorAlignment</term>
                  <description>Indicates the Preselector Alignment calibration data is valid. This step generates coefficients to align the preselector across the frequency range for your device.</description>
               </item>
               <item>
                  <term>GainReference</term>
                  <description>Indicates the Gain Reference calibration data is valid. This step measures the changes in gain since the last external calibration was run. </description>
               </item>
               <item>
                  <term>IFFlatness</term>
                  <description>Indicates the IF Flatness calibration data is valid. This step measures the IF response of the entire system for each of the supported IF filters.</description>
               </item>
               <item>
                  <term>DigitizerSelfcal</term>
                  <description>Indicates the Digitizer Self Cal calibration data is valid. This step calls for digitizer self-calibration, if the digitizer is associated with the RF downconverter.</description>
               </item>
               <item>
                  <term>LOSelfCal</term>
                  <description>Indicates the LO Self Cal calibration data is valid. This step calls for LO self-calibration, if the LO source module is associated with the RF downconverter.</description>
               </item>
            </list>
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOInPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetLOInPower" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the power level expected at the LO IN terminal when the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOSource(System.String,System.String)" crefType="FullyQualified" /> method is set to RFMXINSTR_VAL_LO_SOURCE_LO_IN. This value is expressed in dBm.
         </summary>
         <param name="channelName">
            Specifies the losource number.<br /> Example: "losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Specifies the power level expected at the LO IN terminal when the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOSource(System.String,System.String)" crefType="FullyQualified" /> method is set to <em>RFMXINSTR_VAL_LO_SOURCE_LO_IN</em>. This value is expressed in dBm.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOInPower" crefType="PartiallyQualified" /> attribute.The default value is 0.      Supported devices: PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLOInPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetLOInPower" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power level expected at the LO IN terminal when the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOSource(System.String,System.String)" crefType="FullyQualified" /> method is set to <em>RFMXINSTR_VAL_LO_SOURCE_LO_IN</em>. This value is expressed in dBm.
         </summary>
         <param name="channelName">
            Specifies the losource number.<br /> Example: "losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the power level expected at the LO IN terminal when the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOSource(System.String,System.String)" crefType="FullyQualified" /> method is set to <em>RFMXINSTR_VAL_LO_SOURCE_LO_IN</em>. This value is expressed in dBm.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOInPower" crefType="PartiallyQualified" /> attribute.The default value is 0.      Supported devices: PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOOutPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetLOOutPower" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the power level of the signal at the LO OUT terminal when the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOExportEnabled(System.String,System.Boolean)" crefType="FullyQualified" /> method is set to TRUE. This value is expressed in dBm.
         </summary>
         <param name="channelName">
            Specifies the losource number.<br /> Example: "losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Specifies the power level of the signal at the LO OUT terminal when the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOExportEnabled(System.String,System.Boolean)" crefType="FullyQualified" /> method is set to TRUE. This value is expressed in dBm.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOOutPower" crefType="PartiallyQualified" /> attribute.The default value is 0.Supported devices: PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLOOutPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetLOOutPower" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power level of the signal at the LO OUT terminal when the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOExportEnabled(System.String,System.Boolean)" crefType="FullyQualified" /> method is set to TRUE. This value is expressed in dBm.
         </summary>
         <param name="channelName">
            Specifies the losource number.<br /> Example: "losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the power level of the signal at the LO OUT terminal when the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOExportEnabled(System.String,System.Boolean)" crefType="FullyQualified" /> method is set to TRUE. This value is expressed in dBm.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOOutPower" crefType="PartiallyQualified" /> attribute.The default value is 0.Supported devices: PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOPllFractionalMode(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOPllFractionalMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetLOPllFractionalMode" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOPllFractionalMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to use fractional mode for the LO phase-locked loop (PLL).
         </summary>
         <param name="channelName">
            Specifies the losource number.<br /> Example: "losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies whether to use fractional mode for the LO phase-locked loop (PLL).      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOPllFractionalMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOPllFractionalMode.Enabled" crefType="PartiallyQualified" />.Supported devices: PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLOPllFractionalMode(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOPllFractionalMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetLOPllFractionalMode" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOPllFractionalMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to use fractional mode for the LO phase-locked loop (PLL).
         </summary>
         <param name="channelName">
            Specifies the losource number.<br /> Example: "losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains whether to use fractional mode for the LO phase-locked loop (PLL).      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOPllFractionalMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOPllFractionalMode.Enabled" crefType="PartiallyQualified" />.Supported devices: PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetOptimizePathForSignalBandwidth(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXOptimizePathForSignalBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetOptimizePathForSignalBandwidth" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXOptimizePathForSignalBandwidth" nireturnvaluetype="System.Int32">

         <summary>
            Optimizes RF path for the signal bandwidth that is centered on the IQ carrier frequency.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Optimizes RF path for the signal bandwidth that is centered on the IQ carrier frequency.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.OptimizePathForSignalBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOptimizePathForSignalBandwidth.Automatic" crefType="PartiallyQualified" />.      Supported devices: PXIe-5830/5831/5832/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetOptimizePathForSignalBandwidth(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXOptimizePathForSignalBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetOptimizePathForSignalBandwidth" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXOptimizePathForSignalBandwidth" nireturnvaluetype="System.Int32">

         <summary>
            Optimizes RF path for the signal bandwidth that is centered on the IQ carrier frequency.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Optimizes RF path for the signal bandwidth that is centered on the IQ carrier frequency.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.OptimizePathForSignalBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOptimizePathForSignalBandwidth.Automatic" crefType="PartiallyQualified" />.      Supported devices: PXIe-5830/5831/5832/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetInputIsolationEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXInputIsolationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetInputIsolationEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXInputIsolationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether input isolation is enabled.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies whether input isolation is enabled.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.InputIsolationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXInputIsolationEnabled.Disabled" crefType="PartiallyQualified" />.      Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetInputIsolationEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXInputIsolationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetInputIsolationEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXInputIsolationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether input isolation is enabled.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains whether input isolation is enabled.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.InputIsolationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXInputIsolationEnabled.Disabled" crefType="PartiallyQualified" />.      Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetCalibrationPlaneNames(System.String,System.String[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetCalibrationPlaneNames" nihasget="0" nihasset="0" niparameters="selectorString,calibrationPlaneNames" niparametertypes="System.String,ref System.String[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="calibrationPlaneNames">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetCalibrationPlaneEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXCalibrationPlaneEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetCalibrationPlaneEnabled" nihasget="0" nihasset="0" niparameters="selectorString,calibrationPlaneEnabled" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXCalibrationPlaneEnabled" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="calibrationPlaneEnabled">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetActiveTableName(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetActiveTableName" nihasget="0" nihasset="0" niparameters="selectorString,activeTableName" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="activeTableName">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetExternalAttenuationTableNames(System.String,System.String[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetExternalAttenuationTableNames" nihasget="0" nihasset="0" niparameters="selectorString,externalAttenuationTableNames" niparametertypes="System.String,ref System.String[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="externalAttenuationTableNames">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetExternalAttenuationTableType(System.String,System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXCalibrationTableType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetExternalAttenuationTableType" nihasget="0" nihasset="0" niparameters="selectorString,tableName,calibrationTableType" niparametertypes="System.String,System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXCalibrationTableType" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="tableName">missing content</param>
         <param name="calibrationTableType">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ConfigureAutomaticSGSASharedLO(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXAutomaticSGSASharedLO)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAutomaticSGSASharedLO" nihasget="0" nihasset="0" niparameters="selectorString,automaticSGSASharedLO" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXAutomaticSGSASharedLO" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>
            Configures whether RFmx automatically decides if the signal analyzer uses the LO utilized by the signal generator on the same Vector Signal Transceiver (VST) based on the configured measurements.
            <br /><em>supporteddevices</em>: PXIe-5830/5831/5832/5840/5841/5842<br />
         </summary>
         <param name="selectorString">
            Specifies the selector string. The default value is <format type="monospace">""</format> (empty string).
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
         </param>
         <param name="automaticSGSASharedLO">
            Specifies whether RFmx automatically configures the signal analyzer to use the LO utilized by the signal generator on the same Vector Signal Transceiver (VST) based on the configured measurements.
            <br />
            When using instruments that do not have LOs with excellent phase noise and to minimize the contribution of the instrument's phase noise affecting your measurements, NI recommends to share the local oscillator (LO) between the Signal Generator (SG) and Signal Analyzer (SA).<br />

            This parameter is recommended in test setups that use a VST with NI-RFSG to generate a signal at the DUT's input and RFmx to measure the signal at the DUT's output.
            <br />
            This parameter automatically:

            determines whether the SG LO can be shared with SA based on the test instrument used, selected measurement, and the measurement settings.
            configures instrument specific methods on SA to share the LO between the generator and analyzer, whenever possible.

            <br />

            To enable automatically sharing SG LO with SA, you must first setup the required device specific physical connections mentioned in the following table and then follow the steps in the recommended order.


            PXIe-5840/5841/5842
            SG LO is shared with SA via an external path. Hence, you must connect RF Out LO Out to RF In LO In using a cable.


            PXIe-5830/5831/5832
            SG LO is shared with SA via an internal path. Hence, an external cable connection is not required.


            Enable Automatic SG SA Shared LO on NI-RFSG Playback Library.

            Enable Automatic SG SA Shared LO on RFmx.

            Configure any additional settings on RFSG and RFmx, including selecting waveforms.

            Initiate RFSG.

            Initiate RFmx.

            When using a DPD applied signal for performing measurements like ModAcc, PvT, or TXP, you must set the LO Leakage Avoidance Enabled method to False and this parameter to Enabled.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ConfigureSParameterExternalAttenuationType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSParameterExternalAttenuationType" nihasget="0" nihasset="0" niparameters="selectorString,sParameterType" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterType" nireturnvaluetype="System.Int32">

         <summary>
            Configures the type of S-parameter to apply to measurements on the specified port for a Calplane. You can use the <a href="rfmxspecan.chm::/Using_Selector_String.html">Selector String</a> input to specify the name of the Calplane and port to configure for S-parameter. <br /><em>supporteddevices</em>: PXIe-5830/5831/5832/5840/5841/5842/5860<br />
         </summary>
         <param name="selectorString">
            Specifies the calibration plane name in which either S-parameter or external attenuation table is stored. This input accepts the calibration plane name with the <format type="monospace">"calplane::"</format> prefix. If you do not specify the calibration plane name, the default calibration plane instance is used.
            On a MIMO session if you do not specify the port name, this configuration is applied to all MIMO ports in the session for the default calibration plane instance. To configure S-parameter external attenuation type for a specific MIMO port, use the port specifier with or without the calplane name. Example: <span class="monospace">"calplane::plane1/port::myrfsa1/0"</span>.
            <br />
            <note> For PXIe-5830/5831/5832 devices, port names should also be specified along with Calplane names. Hence, the valid selector is "calplane::&lt;calplaneName&gt;/port::&lt;portName&gt;". If you specify "port::all", all ports are  considered configured. For a MIMO port, the valid selector string is "calplane::(calplaneName)/port::(deviceName)/(channelNumber)/(portName)". If you specify "port::all", all MIMO ports are considered configured. Use RFmxInstrMX.GetAvailablePorts method to get the valid port names.</note>
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::if0"</format>
            </para>
            <para>
               <format type="monospace">"port::if0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::all"</format>
            </para>
         </param>
         <param name="sParameterType">
            Specifies the type of S-parameter which applies to measurements on the specified port for a Calplane. If you set this parameter to <em>Scalar</em> or <em>Vector</em>, RFmx adjusts the instrument settings and the returned data to remove the effects of the external network between the instrument and the DUT.
            <para><para><format type="bold">PXIe-5831/5832</format>: Valid values for this parameter are <em>Scalar</em> and <em>Vector</em>. <em>Vector</em> is only supported for TRX Ports in a Semiconductor Test System (STS).
			</para></para>
            <para><format type="bold">PXIe-5840/5841/5842/5860</format>: The only valid value for this parameter is <em>Scalar</em>.
			</para>
			<para>
			 Scalar (1): De-embeds the measurement using the gain term.
             </para>
			<para>
			 Vector (2): De-embeds the measurement using the gain term and the reflection term.
             </para>

		 </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSParameterExternalAttenuationType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSParameterExternalAttenuationType" nihasget="0" nihasset="0" niparameters="selectorString,sParameterType" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterType" nireturnvaluetype="System.Int32">

         <summary>
            <para>Returns the type of S-parameter to apply to measurements on the specified port for a Calplane. You can use the selectorString input to specify the name of the Calplane and port to configure for s-parameter. </para>
            <para>
               <format type="bold">Supported devices</format>: PXIe-5830/5831/5832/5840
            </para>
         </summary>
         <param name="selectorString">
            Specifies the calibration plane name in which either S-parameter or external attenuation table is stored. This input accepts the calibration plane name with the <format type="monospace">"calplane::"</format> prefix. If you do not specify the calibration plane name, the default calibration plane instance is used. The default value is <format type="monospace">""</format> (empty string).
            On a MIMO session if you do not specify the port name, this configuration is applied to all MIMO ports in the session for the default calibration plane instance. To configure S-parameter external attenuation table for a specific MIMO port, use the port specifier with or without the calplane name. Example: <span class="monospace">"calplane::plane1/port::myrfsa1/0"</span>.
            <br />
            <note> For PXIe-5830/5831/5832 devices, port names should also be specified along with Calplane names. Hence, the valid selector is "calplane::&lt;calplaneName&gt;/port::&lt;portName&gt;". Hence, the valid selector string is "calplane::(calplaneName)/port::(deviceName)/(channelNumber)/(portName)". For a MIMO port, the valid selector string is "calplane::(calplaneName)/port::(deviceName)/(channelNumber)/(portName)". If you specify "port::all", all MIMO ports are considered configured. Use RFmxInstrMX.GetAvailablePorts method to get the valid port names.</note>
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::if0"</format>
            </para>
            <para>
               <format type="monospace">"port::if0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::myrfsa1/0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::myrfsa1/0/if0"</format>
            </para>
         </param>
         <param name="sParameterType">
            Returns the type of S-parameter which applies to measurements on the specified port for a Calplane. 
         </param>
         <returns>
            Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
         </returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLOVcoFrequencyStepSize(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetLOVcoFrequencyStepSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the step size for tuning the internal voltage-controlled oscillator (VCO) used to generate the LO signal. The valid values for LO1 include 1 Hz to 50 MHz and for LO2 include 1 Hz to 100 MHz.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the step size for tuning the internal voltage-controlled oscillator (VCO) used to generate the LO signal. The valid values for LO1 include 1 Hz to 50 MHz and for LO2 include 1 Hz to 100 MHz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOVcoFrequencyStepSize" crefType="PartiallyQualified" /> attribute.The default value is 1 MHz.      Supported devices: PXIe-5830/5831/5832
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOVcoFrequencyStepSize(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetLOVcoFrequencyStepSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the step size for tuning the internal voltage-controlled oscillator (VCO) used to generate the LO signal. The valid values for LO1 include 1 Hz to 50 MHz and for LO2 include 1 Hz to 100 MHz.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the step size for tuning the internal voltage-controlled oscillator (VCO) used to generate the LO signal. The valid values for LO1 include 1 Hz to 50 MHz and for LO2 include 1 Hz to 100 MHz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOVcoFrequencyStepSize" crefType="PartiallyQualified" /> attribute.The default value is 1 MHz.      Supported devices: PXIe-5830/5831/5832
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetThermalCorrectionHeadroomRange(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetThermalCorrectionHeadroomRange" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the expected thermal operating range of the instrument from the self-calibration temperature returned from the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDeviceTemperature(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in degree Celsius.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">
            Upon return, contains the expected thermal operating range of the instrument from the self-calibration temperature returned from the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDeviceTemperature(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in degree Celsius.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ThermalCorrectionHeadroomRange" crefType="PartiallyQualified" /> attribute.Default value PXIe-5830/5831/5832/5842/5860: 5, PXIe-5840/5841: 10 .           Supported devices: PXIe-5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetThermalCorrectionHeadroomRange(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetThermalCorrectionHeadroomRange" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the expected thermal operating range of the instrument from the self-calibration temperature returned from the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDeviceTemperature(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in degree Celsius.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">
            Specifies the expected thermal operating range of the instrument from the self-calibration temperature returned from the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDeviceTemperature(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in degree Celsius.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ThermalCorrectionHeadroomRange" crefType="PartiallyQualified" /> attribute.Default value PXIe-5830/5831/5832/5842/5860: 5, PXIe-5840/5841: 10.            Supported devices: PXIe-5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLOFrequencyStepSize(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetLOFrequencyStepSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the step size for tuning the LO phase-locked loop (PLL).
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the step size for tuning the LO phase-locked loop (PLL).      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOFrequencyStepSize" crefType="PartiallyQualified" /> attribute. Default values PXIe-5644/5645/5646 200 kHz PXIe-5830 2 MHz PXIe-5831/5832 (RF port) 8 MHz PXIe-5831/5832 (IF port) 2 MHz, 4 MHz PXIe-5840/5841/5842 500 kHz The default value for PXIe-5831/5832 depends on the frequency range of the selected port for your instrument configuration. Use RFmxInstr Get Available Ports VI to get the valid port names.Supported devices: PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOFrequencyStepSize(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetLOFrequencyStepSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the step size for tuning the LO phase-locked loop (PLL).
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the step size for tuning the LO phase-locked loop (PLL).      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOFrequencyStepSize" crefType="PartiallyQualified" /> attribute. Default values PXIe-5644/5645/5646 200 kHz PXIe-5830 2 MHz PXIe-5831/5832 (RF port) 8 MHz PXIe-5831/5832 (IF port)2 MHz, 4 MHz PXIe-5840/5841/5842 500 kHz The default value for PXIe-5831/5832 depends on the frequency range of the selected port for your instrument configuration. Use RFmxInstr Get Available Ports VI to get the valid port names. Supported devices: PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRFHighpassFilterFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRFHighpassFilterFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering silly.For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this method returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering silly.For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this method returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFHighpassFilterFrequency" crefType="PartiallyQualified" /> attribute.The default value is 0.The valid values range from 0 to 26.5.Supported devices: PXIe-5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetRFHighpassFilterFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetRFHighpassFilterFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering silly.For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this method returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering silly.For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this method returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFHighpassFilterFrequency" crefType="PartiallyQualified" /> attribute.The default value is 0.The valid values range from 0 to 26.5.Supported devices: PXIe-5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.DangerousGetNIRfsaHandleArray(System.IntPtr[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DangerousGetNIRfsaHandleArray" nihasget="0" nihasset="0" niparameters="niRfsaSessions" niparametertypes="ref System.IntPtr[]" nireturnvaluetype="System.Int32">
         <summary>
            Returns list of underlying instrument handles.
            <note type="note">
               Do not close the NI-RFSA driver session before calling RFmx close. Closing the NI-RFSA driver session before closing RFmx session would lead to unpredictable behavior.
            </note>
         </summary>
         <param name="niRfsaSessions"> Upon return, contains list of underlying instrument handles.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetOpenSessionsInformation(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetOpenSessionsInformation" nihasget="0" nihasset="0" niparameters="resourceName,infoJson" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="resourceName">missing content</param>
         <param name="infoJson">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSelfCalibrationValidityCheck(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrationValidityCheck@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSelfCalibrationValidityCheck" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrationValidityCheck" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether RFmx validates the self-calibration data.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains whether RFmx validates the self-calibration data.             </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SelfCalibrationValidityCheck" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrationValidityCheck.Off" crefType="PartiallyQualified" />.            Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5833/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetSelfCalibrationValidityCheck(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrationValidityCheck)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetSelfCalibrationValidityCheck" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrationValidityCheck" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether RFmx validates the self-calibration data.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies whether RFmx validates the self-calibration data.             </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SelfCalibrationValidityCheck" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrationValidityCheck.Off" crefType="PartiallyQualified" />.            Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5833/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSelfCalibrationValidityCheckTimeInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSelfCalibrationValidityCheckTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the minimum time between two self calibration validity checks. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the minimum time between two self calibration validity checks. This value is expressed in seconds.            </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SelfCalibrationValidityCheckTimeInterval" crefType="PartiallyQualified" /> attribute.The default value is 30 seconds.      Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5833/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetSelfCalibrationValidityCheckTimeInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetSelfCalibrationValidityCheckTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the minimum time between two self calibration validity checks. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the minimum time between two self calibration validity checks. This value is expressed in seconds.            </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SelfCalibrationValidityCheckTimeInterval" crefType="PartiallyQualified" /> attribute.The default value is 30 seconds.      Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5833/5840/5841/5842
         </remarks>

      </member>

      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDigitalGain(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetDigitalGain" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">  
         
         <summary>
            Gets the scaling factor applied to the time-domain voltage data in the digitizer. This value is expressed in dB.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value"> <para>Upon return, contains the the scaling factor applied to the time-domain voltage data in the digitizer. This value is expressed in dB. </para> 
                              <para>RFmx does not compensate for the specified digital gain. You can use this property to account for external gain changes without changing the analog signal path. The PXIe-5644/5645/5646 applies this gain when the data is scaled. The raw data does not include this scaling on these devices.</para> 
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DigitalGain" crefType="PartiallyQualified" /> attribute.The default value is 0 dB.      Supported devices: PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5840/5841
         </remarks>

      </member>

      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetDigitalGain(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetDigitalGain" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the scaling factor applied to the time-domain voltage data in the digitizer. This value is expressed in dB.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value"> <para> Specifies the scaling factor applied to the time-domain voltage data in the digitizer. This value is expressed in dB. </para>        
                              <para>RFmx does not compensate for the specified digital gain. You can use this property to account for external gain changes without changing the analog signal path. The PXIe-5644/5645/5646 applies this gain when the data is scaled. The raw data does not include this scaling on these devices.</para>           
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DigitalGain" crefType="PartiallyQualified" /> attribute.The default value is 0 dB.      Supported devices: PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5840/5841
         </remarks>

      </member>

      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetStartTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetStartTriggerType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the start trigger is a digital edge or a software trigger.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains whether the start trigger is a digital edge or a software trigger.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.None" crefType="PartiallyQualified" />.              Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetStartTriggerType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the start trigger is a digital edge or a software trigger.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies whether the start trigger is a digital edge or a software trigger.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.None" crefType="PartiallyQualified" />.              Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetStartTriggerDigitalEdgeSource(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetStartTriggerDigitalEdgeSource" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the source terminal for the start trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">
            Upon return, contains the source terminal for the start trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerDigitalEdgeSource" crefType="PartiallyQualified" /> attribute.The default value off this property is "" (empty string).            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerDigitalEdgeSource(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetStartTriggerDigitalEdgeSource" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the source terminal for the start trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">
            Specifies the source terminal for the start trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerDigitalEdgeSource" crefType="PartiallyQualified" /> attribute.The default value off this property is "" (empty string).            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetStartTriggerDigitalEdge(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerDigitalEdge@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetStartTriggerDigitalEdge" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerDigitalEdge" nireturnvaluetype="System.Int32">

         <summary>
            Gets the active edge for the start trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">
            Upon return, contains the active edge for the start trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerDigitalEdge" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerDigitalEdge.Rising" crefType="PartiallyQualified" />.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerDigitalEdge(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerDigitalEdge)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetStartTriggerDigitalEdge" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerDigitalEdge" nireturnvaluetype="System.Int32">

         <summary>
            Sets the active edge for the start trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">
            Specifies the active edge for the start trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerDigitalEdge" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerDigitalEdge.Rising" crefType="PartiallyQualified" />.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetStartTriggerExportOutputTerminal(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetStartTriggerExportOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the destination terminal for the exported start trigger.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the destination terminal for the exported start trigger.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerExportOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerExportOutputTerminal(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetStartTriggerExportOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the destination terminal for the exported start trigger.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the destination terminal for the exported start trigger.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerExportOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetStartTriggerTerminalName(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetStartTriggerTerminalName" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the fully qualified signal name as a string.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the fully qualified signal name as a string.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.StartTriggerTerminalName" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAdvanceTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXAdvanceTriggerType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAdvanceTriggerType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXAdvanceTriggerType" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the advance trigger is a digital edge or a software trigger.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains whether the advance trigger is a digital edge or a software trigger.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AdvanceTriggerType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAdvanceTriggerType.None" crefType="PartiallyQualified" />.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAdvanceTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXAdvanceTriggerType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAdvanceTriggerType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXAdvanceTriggerType" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the advance trigger is a digital edge or a software trigger.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies whether the advance trigger is a digital edge or a software trigger.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AdvanceTriggerType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAdvanceTriggerType.None" crefType="PartiallyQualified" />.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAdvanceTriggerDigitalEdgeSource(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAdvanceTriggerDigitalEdgeSource" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the source terminal for the advance trigger.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the source terminal for the advance trigger.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AdvanceTriggerDigitalEdgeSource" crefType="PartiallyQualified" /> attribute.The default value off this property is "" (empty string).            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAdvanceTriggerDigitalEdgeSource(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAdvanceTriggerDigitalEdgeSource" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the source terminal for the advance trigger.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the source terminal for the advance trigger.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AdvanceTriggerDigitalEdgeSource" crefType="PartiallyQualified" /> attribute.The default value off this property is "" (empty string).            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAdvanceTriggerExportOutputTerminal(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAdvanceTriggerExportOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the destination terminal for the exported advance trigger.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the destination terminal for the exported advance trigger.       </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AdvanceTriggerExportOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAdvanceTriggerExportOutputTerminal(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAdvanceTriggerExportOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the destination terminal for the exported advance trigger.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the destination terminal for the exported advance trigger.       </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AdvanceTriggerExportOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAdvanceTriggerTerminalName(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAdvanceTriggerTerminalName" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the fully qualified signal name as a string.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the fully qualified signal name as a string.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AdvanceTriggerTerminalName" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetReadyForStartEventOutputTerminal(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetReadyForStartEventOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the destination terminal for the Ready for Start event.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the destination terminal for the Ready for Start event.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForStartEventOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetReadyForStartEventOutputTerminal(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetReadyForStartEventOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the destination terminal for the Ready for Start event.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the destination terminal for the Ready for Start event.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForStartEventOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetReadyForStartEventTerminalName(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetReadyForStartEventTerminalName" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the fully qualified signal name as a string.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the fully qualified signal name as a string.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForStartEventTerminalName" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetReadyForAdvanceEventOutputTerminal(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetReadyForAdvanceEventOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the destination terminal for the Ready for Advance event.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the destination terminal for the Ready for Advance event.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForAdvanceEventOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetReadyForAdvanceEventOutputTerminal(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetReadyForAdvanceEventOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the destination terminal for the Ready for Advance event.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the destination terminal for the Ready for Advance event.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForAdvanceEventOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetReadyForAdvanceEventTerminalName(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetReadyForAdvanceEventTerminalName" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the fully qualified signal name as a string.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the fully qualified signal name as a string.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForAdvanceEventTerminalName" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetReadyForReferenceEventOutputTerminal(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetReadyForReferenceEventOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the destination terminal for the Ready for Reference event.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the destination terminal for the Ready for Reference event.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForReferenceEventOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetReadyForReferenceEventOutputTerminal(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetReadyForReferenceEventOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the destination terminal for the Ready for Reference event.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the destination terminal for the Ready for Reference event.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForReferenceEventOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetReadyForReferenceEventTerminalName(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetReadyForReferenceEventTerminalName" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the fully qualified signal name as a string.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the fully qualified signal name as a string.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ReadyForReferenceEventTerminalName" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetEndOfRecordEventOutputTerminal(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetEndOfRecordEventOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the destination terminal for the End of Record event.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the destination terminal for the End of Record event.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.EndOfRecordEventOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetEndOfRecordEventOutputTerminal(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetEndOfRecordEventOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the destination terminal for the End of Record event.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the destination terminal for the End of Record event.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.EndOfRecordEventOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetEndOfRecordEventTerminalName(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetEndOfRecordEventTerminalName" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the fully qualified signal name as a string.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the fully qualified signal name as a string.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.EndOfRecordEventTerminalName" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDoneEventOutputTerminal(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetDoneEventOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the destination terminal for the Done event.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the destination terminal for the Done event.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DoneEventOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetDoneEventOutputTerminal(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetDoneEventOutputTerminal" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the destination terminal for the Done event.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the destination terminal for the Done event.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DoneEventOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.            Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDoneEventTerminalName(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetDoneEventTerminalName" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the fully qualified signal name as a string.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the fully qualified signal name as a string.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DoneEventTerminalName" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetTemperatureReadInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetTemperatureReadInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the minimum time difference between temperature sensor readings. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the minimum time difference between temperature sensor readings. This value is expressed in seconds.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.TemperatureReadInterval" crefType="PartiallyQualified" /> attribute.The default value is 30 seconds.       Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetTemperatureReadInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetTemperatureReadInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the minimum time difference between temperature sensor readings. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the minimum time difference between temperature sensor readings. This value is expressed in seconds.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.TemperatureReadInterval" crefType="PartiallyQualified" /> attribute.The default value is 30 seconds.       Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetThermalCorrectionTemperatureResolution(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetThermalCorrectionTemperatureResolution" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the temperature change required before RFmx recalculates the thermal correction settings when entering the running state. This value is expressed in degree Celsius.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the temperature change required before RFmx recalculates the thermal correction settings when entering the running state. This value is expressed in degree Celsius.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ThermalCorrectionTemperatureResolution" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5830/5831/5832/5840/5841/5842/5860      Default value:       PXIe-5830/5831/5832/5842/5860: 0.2       PXIe-5840/5841: 1.0
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetThermalCorrectionTemperatureResolution(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetThermalCorrectionTemperatureResolution" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the temperature change required before RFmx recalculates the thermal correction settings when entering the running state. This value is expressed in degree Celsius.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the temperature change required before RFmx recalculates the thermal correction settings when entering the running state.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ThermalCorrectionTemperatureResolution" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5830/5831/5832/5840/5841/5842/5860      Default value:       PXIe-5830/5831/5832/5842/5860: 0.2       PXIe-5840/5841: 1.0
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.RegisterSpecialClientSnapshotInterest(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RegisterSpecialClientSnapshotInterest" nihasget="0" nihasset="0" niparameters="resourceName" niparametertypes="System.String" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="resourceName">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.UnregisterSpecialClientSnapshotInterest(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="UnregisterSpecialClientSnapshotInterest" nihasget="0" nihasset="0" niparameters="resourceName" niparametertypes="System.String" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="resourceName">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SendSoftwareEdgeStartTrigger" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SendSoftwareEdgeStartTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">

         <summary>
            Sends a trigger to the waiting device when you choose a software version of Start trigger. You can also use this method to override a hardware trigger.
            <br />
            This method returns an error if:<br /><ul>
               <li>
                  You configure an invalid trigger.<br />
               </li>
               <li>
                  You have not previously called the RFmx Initiate method.<br />
               </li>
            </ul><em>supporteddevices</em>: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860<br />
         </summary>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SendSoftwareEdgeAdvanceTrigger" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SendSoftwareEdgeAdvanceTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">

         <summary>
            Sends a trigger to the waiting device when you choose a software version of the Advance trigger. You can also use this method to override a hardware trigger.
            <br />
            This method returns an error if:<br /><ul>
               <li>
                  You configure an invalid trigger.<br />
               </li>
               <li>
                  You have not previously called the RFmx Initiate method.<br />
               </li>
            </ul><em>supporteddevices</em>: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860<br />
         </summary>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDeviceSynchronizationMode(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXDeviceSynchronizationMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="GetDeviceSynchronizationMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXDeviceSynchronizationMode" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="value">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetDeviceSynchronizationMode(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXDeviceSynchronizationMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="SetDeviceSynchronizationMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXDeviceSynchronizationMode" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="value">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLOSharingMode(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOSharingMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="GetLOSharingMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOSharingMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets the RFmx session with the respective LO sharing mode.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the RFmx session with the respective LO sharing mode.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOSharingMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOSharingMode.Disabled" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOSharingMode(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOSharingMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="SetLOSharingMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOSharingMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets the RFmx session with the respective LO sharing mode.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the RFmx session with the respective LO sharing mode.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOSharingMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOSharingMode.Disabled" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetNumberOfLOSharingGroups(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfLOSharingGroups" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the RFmx session with the number of LO sharing groups.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Upon return, contains the RFmx session with the number of LO sharing groups.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.NumberOfLOSharingGroups" crefType="PartiallyQualified" /> attribute.The default value is 1.            The valid values are 1 and 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetNumberOfLOSharingGroups(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfLOSharingGroups" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the RFmx session with the number of LO sharing groups.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Specifies the RFmx session with the number of LO sharing groups.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.NumberOfLOSharingGroups" crefType="PartiallyQualified" /> attribute.The default value is 1.            The valid values are 1 and 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetExternalAttenuationTableActualValue(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="GetExternalAttenuationTableActualValue" nihasget="0" nihasset="0" niparameters="selectorString,externalAttenuation" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>Returns the external attenuation table actual value that is applied to the measurements for a specified signal and calibration plane.</summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">Selector String</a> comprising of the signal name and calibration plane name. This input accepts the calibration plane name with the <format type="monospace">"calplane::"</format> prefix. If you do not specify the calibration plane name, the default calibration plane instance is used. The default value is <format type="monospace">""</format> (empty string). On a MIMO session, you must use "port::&lt;deviceName&gt;/&lt;channelNumber&gt;" as part of the selector string to read the external attenuation table actual value for the specified port. If you do not specify the signal name, the value is returned for the last committed signal instance.<br/>
            example:
            ""
            "signal::sig1"
            "calplane::plane0"
            "signal::sig1/calplane::plane0"
            "port::rfsa1/0"
            "signal::sig1/port::rfsa1/0"
            "calplane::plane0/port::rfsa1/0"
            "signal::sig1/calplane::plane0/port::rfsa1/0"
         </param>
         <param name="externalAttenuation">Upon return, contains the external attenuation table actual value applied to the measurements for a specified signal and calibration plane. This further includes interpolation of the external attenuation table based on the specified signal. On a MIMO session, this value corresponds to a specified port. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.FetchRawIQData(System.String,System.Double,System.Int32,System.Int64,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="FetchRawIQData" nihasget="0" nihasset="0" niparameters="selectorString,timeout,recordsToFetch,samplesToRead,data" niparametertypes="System.String,System.Double,System.Int32,System.Int64,ref NationalInstruments.ComplexWaveform`1" nireturnvaluetype="System.Int32">

         <summary>Fetches I/Q data from a single record in an acquisition.</summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="timeout">Specifies the timeout, in seconds, for fetching the raw IQ data. A value of -1 specifies that the VI waits until all data is available. A value of 0 specifies the VI immediately returns available data. The default value is 10. </param>
         <param name="recordsToFetch">Specifies the record to retrieve. Record numbers are zero-based. The default value is 0. </param>
         <param name="samplesToRead">Specifies the number of samples to fetch. A value of -1 specifies that RFmx fetches all samples. The default value is -1. </param>
         <param name="data">Returns the complex-value time domain data array. The real and imaginary parts of this complex data array correspond to the in-phase (I) and quadrature-phase (Q) data, respectively. To calculate the instantaneous power of a sampled I/Q point, use the equation (<format type="italic">I</format>
         <format type="superscript">2</format> + <format type="italic">Q</format>
			<format type="superscript">2</format>) / 2<format type="italic">R</format>, where <format type="italic">R</format> is the input impedance in ohms. For RFmx, <format type="italic">R</format> = 50 ohms. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildCalibrationPlaneString(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="BuildCalibrationPlaneString" nihasget="0" nihasset="0" niparameters="calibrationPlaneName" niparametertypes="System.String" nireturnvaluetype="System.String">

         <summary>
            Creates the selector string to use with External Attenuation Table methods.<br />
         </summary>
         <param name="calibrationPlaneName">Specifies the calibration plane name for building the selector string. This input accepts the calibration plane name with or without the "calplane::" prefix.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="BuildPortString" nihasget="0" nihasset="0" niparameters="selectorString,portName" niparametertypes="System.String,System.String" nireturnvaluetype="System.String">
<exclude/>
         <summary>
            Creates the port string to use as the selector string with External Attenuation Table methods. On a MIMO session, this method can be used to build port string to use as a selector string for configuring or reading port-specific methods and external attenuation table methods.<br />
         </summary>
         <param name="selectorString">
            Specifies the calibration plane string when used for building port string for the external attenuation table methods. If you do not specify the calibration plane string, the default calibration plane instance is used.
            <para>Example:</para>
            <para>""</para>
            <para>"calplane::plane0"</para>
         </param>
         <param name="portName">
            Specifies the port for building the selector string.
            <br />
         </param>
         <returns>Upon return, contains the selector string created by this method.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="BuildLOString" nihasget="0" nihasset="0" niparameters="selectorString,loIndex" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates the LO string to use as the selector string for LO related methods.<br />
         </summary>
         <param name="selectorString">
            Specifies the selector string. The default value is "" (empty string).
            <para>Example:</para>
            <para>""</para>
         </param>
         <param name="loIndex">Specifies the LO index for building the selector string.</param>
         <returns>Upon return, contains the selector string created by this method.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildModuleString(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="BuildModuleString" nihasget="0" nihasset="0" niparameters="selectorString,moduleName" niparametertypes="System.String,System.String" nireturnvaluetype="System.String">

         <summary>
            Configures the Module string to use as the <a href="rfmxspecan.chm::/Using_Selector_String.html">Selector String</a> for reading temperature of specific modules of the device.<br />
         </summary>
         <param name="selectorString">
            specifies the selector string. The default value is <format type="monospace">""</format> (empty string).
         </param>
         <param name="moduleName">
            specifies the module for which you want the temperature to be read.
         </param>
         <returns>Upon return, contains the selector string created by this method.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/16/2021 6:28:51 PM" niupdatedby="Sebastius" nidisplayname="BuildPortString2" nihasget="0" nihasset="0" niparameters="selectorString,portName,deviceName,channelNumber" niparametertypes="System.String,System.String,System.String,System.Int32" nireturnvaluetype="System.String">
         
         <summary>
            Creates the port string to use as the selector string with External Attenuation Table methods. On a MIMO session, this method can be used to build port string to use as a selector string for configuring or reading port-specific methods and external attenuation table methods.<br />
         </summary>
         <param name="selectorString">Specifies the calibration plane string when used for building port string for the external attenuation table methods. If you do not specify the calibration plane string, the default calibration plane instance is used.
            <para>Example:</para>
            <para>""</para>
            <para>"calplane::plane0"</para></param>
         <param name="portName"> Specifies the port for building the selector string.
            <br /></param>
         <param name="deviceName">specifies the name of the initialized device for building the selector string.</param>
         <param name="channelNumber">specifies the channel for building the selector string. Specify 0 as the value for this parameter. </param>
         <returns>Upon return, contains the selector string created by this method.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildInstrumentString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="BuildInstrumentString" nihasget="0" nihasset="0" niparameters="selectorString,instrumentNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates the instrument string to use as the Selector String for reading the recommended settings.<br />
         </summary>
         <param name="selectorString">
            Specifies the selector string. The default value is "" (empty string).
            <para>Example:</para>
            <para>""</para>
         </param>
         <param name="instrumentNumber">Specifies the instrument number for which you want the recommended settings to be read.</param>
         <returns>Upon return, contains the selector string created by this method.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ExportSignal(NationalInstruments.RFmx.InstrMX.RFmxInstrMXExportSignalSource,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ExportSignal" nihasget="0" nihasset="0" niparameters="exportSignalSource,exportSignalOutputTerminal" niparametertypes="NationalInstruments.RFmx.InstrMX.RFmxInstrMXExportSignalSource,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Routes signals (triggers, clocks, and events) to the specified output terminal.<br />
            This method is not supported on a MIMO session.
         </summary>
         <param name="exportSignalSource">
            Controls the source to export signals.
            <br />
         </param>
         <param name="exportSignalOutputTerminal">
            Specifies the terminal where the signal is exported. You can also choose not to export any signal.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.WaitForAcquisitionComplete(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="WaitForAcquisitionComplete" nihasget="0" nihasset="0" niparameters="timeout" niparametertypes="System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Waits and blocks the data flow until the acquisition is complete. This method is typically called after a specific initiate method.<br />
         </summary>
         <param name="timeout">Specifies the time to wait for an ongoing acquisition to complete before returning a timeout error. A value of -1 specifies that the method waits indefinitely for acquisition to complete. This value is expressed in seconds.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.DangerousGetNIRfsaHandle(System.IntPtr@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DangerousGetNIRfsaHandle" nihasget="0" nihasset="0" niparameters="niRfsaHandle" niparametertypes="out System.IntPtr" nireturnvaluetype="System.Int32">
         <summary>
            Returns the value of the underlying instrument handle.
            <note type="note">
               Do not close the NI-RFSA driver session before calling RFmx close. Closing the NI-RFSA driver session before closing RFmx session would lead to unpredictable behavior.
            </note>
         </summary>
         <param name="niRfsaHandle"> Upon return, contains the value of the underlying instrument handle.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.DangerousGetInstrumentHandle" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DangerousGetInstrumentHandle" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.IntPtr">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetInstrumentHandle" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetInstrumentHandle" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Runtime.InteropServices.SafeHandle">

         <summary>
            Gets the <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to the <see cref="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMX"/> instrument session.
         </summary>
         <returns>
            A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to <see cref="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMX"/> instrument session.
         </returns>
         <remarks>
            Using the <see cref="T:System.Runtime.InteropServices.SafeHandle"/>, you can get the <see cref="T:System.IntPtr"/> to the session; however, there are risks involved with using the <see cref="T:System.IntPtr"/>.
            It is difficult to know the state of the handle, and the handle could be recycled while you are using it. For more information, refer to
            <see cref="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" crefType="PartiallyQualified"/>.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ResetAttribute(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ResetAttribute" nihasget="0" nihasset="0" niparameters="channelName,attributeId" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId" nireturnvaluetype="System.Int32">

         <summary>
            Resets the attribute to its default value.
         </summary>
         <param name="channelName">Specifies the selector string for the property being reset. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeId">Specifies an attribute identifier.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ResetDriver" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ResetDriver" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">

         <summary>
            Restores the NI-RFSA driver state to a default state to avoid RFmx using any hardware or driver state that was set by the RF toolkits or other custom NI-RFSA code.<br />
            Use this method when you switch back to using RFmx to perform measurements after you have used the NI-RFSA handle to perform measurements with RF toolkits or you have used other custom NI-RFSA code. Unlike the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ResetToDefault" crefType="FullyQualified" /> method, the RfmxInstr Reset Driver method does not reset RFmx methods configured on the RFmx session. Hence, you do not need to set RFmx methods again when switching back to RFmx measurements. Refer to RFmx SpecAn CHP - WCDMA ModAcc - CHP Example (LabVIEW) on ni.com  for more information about using RFmx to perform measurements.<br />
         </summary>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeAuthor(System.String,System.Int32,NationalInstruments.RFmx.InstrMX.RFmxInstrMXAttributeAuthor@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeAuthor" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXAttributeAuthor" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDouble(System.String,System.Int32,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDouble" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of a Double attribute.
         </summary>
         <param name="channelName">
            Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Passes the ID of an attribute.</param>
         <param name="value">Upon return, contains a value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeInt(System.String,System.Int32,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeInt" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of an RFmx 32-bit integer (int32) attribute.
         </summary>
         <param name="channelName">
            Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains a value of the specified attribute ID.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeString(System.String,System.Int32,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeString" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of a string attribute.
         </summary>
         <param name="channelName">
            Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains a value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeBool(System.String,System.Int32,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeBool" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of a Bool attribute.
         </summary>
         <param name="channelName">
            Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains a value of the specified attribute ID.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeDouble(System.String,System.Int32,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeDouble" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of a Double attribute.
         </summary>
         <param name="channelName">
            Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeInt(System.String,System.Int32,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeInt" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of a Int attribute.
         </summary>
         <param name="channelName">
            Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeString(System.String,System.Int32,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeString" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of a String attribute.
         </summary>
         <param name="channelName">
            Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeBool(System.String,System.Int32,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeBool" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of a Bool attribute.
         </summary>
         <param name="channelName">
            Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeSByte(System.String,System.Int32,System.SByte)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeSByte" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.SByte" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a SByte attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeSByte(System.String,System.Int32,System.SByte@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeSByte" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.SByte" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a SByte attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeByte(System.String,System.Int32,System.Byte)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeByte" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Byte" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a Byte attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeByte(System.String,System.Int32,System.Byte@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeByte" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Byte" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a Byte attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeShort(System.String,System.Int32,System.Int16)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeShort" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Int16" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a Short attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeShort(System.String,System.Int32,System.Int16@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeShort" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Int16" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a Short attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeUShort(System.String,System.Int32,System.UInt16)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeUShort" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.UInt16" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a UShort attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeUShort(System.String,System.Int32,System.UInt16@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeUShort" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.UInt16" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a UShort attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeLong(System.String,System.Int32,System.Int64)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeLong" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Int64" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of a Long attribute.
         </summary>
         <param name="channelName">
            Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeLong(System.String,System.Int32,System.Int64@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeLong" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Int64" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of an RFmx 64-bit integer (int64) attribute.
         </summary>
         <param name="channelName">
            Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains a value of the specified attribute ID.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeFloat(System.String,System.Int32,System.Single)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeFloat" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Single" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a Float attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeFloat(System.String,System.Int32,System.Single@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeFloat" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Single" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a Float attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeUInt(System.String,System.Int32,System.UInt32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeUInt" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.UInt32" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a UInt attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeUInt(System.String,System.Int32,System.UInt32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeUInt" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.UInt32" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a uint attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeByteArray(System.String,System.Int32,System.Byte[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeByteArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Byte[]" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a byte array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeByteArray(System.String,System.Int32,System.Byte[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeByteArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.Byte[]" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a byte array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeSByteArray(System.String,System.Int32,System.SByte[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeSByteArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.SByte[]" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a sbyte array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeSByteArray(System.String,System.Int32,System.SByte[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeSByteArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.SByte[]" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a sbyte array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeIntArray(System.String,System.Int32,System.Int32[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeIntArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Int32[]" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a int array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeIntArray(System.String,System.Int32,System.Int32[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeIntArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.Int32[]" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a int array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeUIntArray(System.String,System.Int32,System.UInt32[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeUIntArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.UInt32[]" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a uint array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeUIntArray(System.String,System.Int32,System.UInt32[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeUIntArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.UInt32[]" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a uint array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeLongArray(System.String,System.Int32,System.Int64[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeLongArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Int64[]" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a long array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeLongArray(System.String,System.Int32,System.Int64[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeLongArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.Int64[]" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a long array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeULongArray(System.String,System.Int32,System.UInt64[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeULongArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.UInt64[]" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a ulong array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeULongArray(System.String,System.Int32,System.UInt64[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeULongArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.UInt64[]" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a ulong array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeFloatArray(System.String,System.Int32,System.Single[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeFloatArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Single[]" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a float array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeFloatArray(System.String,System.Int32,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeFloatArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.Single[]" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a float array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeDoubleArray(System.String,System.Int32,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeDoubleArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Double[]" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a double array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDoubleArray(System.String,System.Int32,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDoubleArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.Double[]" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a double array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeComplexDoubleArray(System.String,System.Int32,NationalInstruments.ComplexDouble[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeComplexDoubleArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,NationalInstruments.ComplexDouble[]" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a ComplexDouble array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeComplexDoubleArray(System.String,System.Int32,NationalInstruments.ComplexDouble[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeComplexDoubleArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref NationalInstruments.ComplexDouble[]" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a ComplexDouble array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAttributeComplexSingleArray(System.String,System.Int32,NationalInstruments.ComplexSingle[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeComplexSingleArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a ComplexSingle array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeComplexSingleArray(System.String,System.Int32,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeComplexSingleArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a ComplexSingle array attribute.
         </summary>
         <param name="channelName">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx Instr Help for more information about configuring the selector string.</param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains the value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SaveAllConfigurations(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SaveAllConfigurations" nihasget="0" nihasset="0" niparameters="filePath" niparametertypes="System.String" nireturnvaluetype="System.Int32">

         <summary>
            Saves all the configured methods in the RFmx session to a file in the specified file path. Use this method to save the current state of the RFmx session. On a MIMO session, this method saves all the configured methods for the specified MIMO port.
            <br />
            List configurations, reference waveforms and external attenuation tables are not saved by this method.

         </summary>
         <param name="filePath">
            Specifies the complete path to the file to which the configurations are to be saved. 
				Default file extension: .rfmxconfig<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.LoadAllConfigurations(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LoadAllConfigurations" nihasget="0" nihasset="0" niparameters="filePath,loadRFInstrConfiguration" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
  <exclude/>
         <summary>
            Loads the methods of an RFmx session saved in a file. This file can be generated using <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SaveAllConfigurations(System.String)" crefType="FullyQualified" /> method or the RF Signal Analyzer panel in InstrumentStudio.<br />
            If the file contains a named signal configuration which is already present in the session, then this method will return an error. It is recommended to call the RFmxInstr Reset Entire Session method to delete all the named signal configurations in the session.
         </summary>
         <param name="filePath">
            Specifies the complete path to the file from which the configurations are to be loaded.
				Default file extension: .rfmxconfig<br />
         </param>
         <param name="loadRFInstrConfiguration">
            Specifies whether to load RFmxInstr methods saved in the file.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ResetEntireSession" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ResetEntireSession" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">

         <summary>
            Deletes all the named signal configurations in the session and resets all methods for the default signal instances of already loaded personalities in the session.<br />
            This method disables all the calibration planes.<br />
         </summary>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.Close" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Close" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">

         <summary>
            Closes the RFmx session.<br />
         </summary>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.Dispose" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">

         <summary>
            Deletes the signal configuration if it is not the default signal configuration and clears any trace of the current signal configuration, if any.
         </summary>
         <remarks>You can call this method safely more than once, even if the signal is already deleted.</remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ForceClose" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ForceClose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">

         <summary>
            Closes all RFmx sessions.  Calling this method once will destroy the session, irrespective of the many references obtained for the session for a particular resource name.
         </summary>
         <remarks>This method maps to the RFmxInstr_Close() function in C.</remarks>
         <remarks>If you have used an existing instrument handle to create this session; calling the Dispose, Close, or ForceClose methods will only dispose the .NET resources associated with this session. The pre-existing instrument handle will NOT be released.</remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.CheckAcquisitionStatus(System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="CheckAcquisitionStatus" nihasget="0" nihasset="0" niparameters="done" niparametertypes="out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Checks the status of the acquisition. Use this method to check for any errors that may occur during acquisition, or to check whether RFmx has completed the acquisition operation.<br />
         </summary>
         <param name="done">Indicates whether the acquisition is complete.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SelectActiveExternalAttenuationTable(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SelectActiveExternalAttenuationTable" nihasget="0" nihasset="0" niparameters="selectorString,tableName" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Activates the external attenuation table set by the <em>tableName</em> parameter in the calibration plane specified by the <em>selectorString</em> parameter. On a MIMO session, this method selects the active external attenuation table for the specified MIMO port. The specified table will be used for amplitude correction during measurement.
            <br /><em>supporteddevices</em>: PXIe-5663/5663E, PXIe-5665, PXIe-5668, PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842/5860<br />
         </summary>
         <param name="selectorString">
            Specifies the calibration plane name in which either the S-parameter table or the external attenuation table is stored. This input accepts the calibration plane name with the "calplane::" prefix. If you do not specify the calibration plane name, the default calibration plane instance is used.
            On a MIMO session, the default "" (empty string) selects the active external attenuation table for all the MIMO Ports. To configure external attenuation type for a specific MIMO port, use the port specifier with or without the calplane name. Example: <span class="monospace">"calplane::plane1/port::myrfsa1/0"</span>.
            <br />
            <note> For PXIe-5830/5831/5832 devices, port names should also be specified along with Calplane names. Hence, the valid selector is "calplane::&lt;calplaneName&gt;/port::&lt;portName&gt;". For a MIMO port, the valid selector string is "calplane::&lt;calplaneName&gt;/port::&lt;deviceName&gt;/&lt;channelNumber&gt;/&lt;portName&gt;". If you specify "port::all", all ports are  considered configured. Use RFmxInstrMX.GetAvailablePorts method to get the valid port names.</note>
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::if0"</format>
            </para>
            <para>
               <format type="monospace">"port::if0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::all"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::myrfsa1/0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::myrfsa1/0, port::myrfsa2/0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::myrfsa1/0/if0"</format>
            </para>
         </param>
         <param name="tableName">
            Specifies the name to be associated with external attenuation table within a calibration plane. Provide a unique name, such as <span class="monospace">"table1"</span> to configure the table.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ConfigureExternalAttenuationTable(System.String,System.String,System.Double[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ConfigureExternalAttenuationTable" nihasget="0" nihasset="0" niparameters="selectorString,tableName,frequency,externalAttenuation" niparametertypes="System.String,System.String,System.Double[],System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Stores the external attenuation table in the calibration plane specified by the <em>selectorString</em> parameter. On a MIMO session, the external attenuation table is stored for each MIMO port in the specified calibration plane.<br />
            If there is only one table configured in any calibration plane, it is automatically selected as the active table.<br /><em>supporteddevices</em>: PXIe-5663/5663E, PXIe-5665, PXIe-5668, PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842/5860<br />
         </summary>
         <param name="selectorString">
            Specifies the calibration plane name in which the external attenuation table is stored. This input accepts the calibration plane name with the "calplane::" prefix. If you do not specify the calibration plane name, the default calibration plane instance is used.
            On a MIMO session if you do not specify the port name, this configuration is applied to all MIMO ports in the session for the default calibration plane instance. To configure external attenuation table for a specific MIMO port, use the port specifier with or without the calplane name. Example: <span class="monospace">"calplane::plane1/port::myrfsa1/0"</span>.
            <br />
            <note>
               For PXIe-5830/5831/5832 devices, port names should also be specified along with Calplane names. Hence, the valid selector is "calplane::&lt;calplaneName&gt;/port::&lt;portName&gt;". If you specify "port::all", all ports are  considered configured. For a MIMO port, the valid selector string is "calplane::&lt;calplaneName&gt;/port::&lt;deviceName&gt;/&lt;channelNumber&gt;/&lt;portName&gt;". If you specify "port::all", all MIMO ports are considered configured. Use RFmxInstrMX.GetAvailablePorts method to get the valid port names.
            </note>
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::if0"</format>
            </para>
            <para>
               <format type="monospace">"port::if0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::all"</format>
            </para>
         </param>
         <param name="tableName">
            Specifies the name to be associated with external attenuation table within a calibration plane. Provide a unique name, such as <span class="monospace">"table1"</span> to configure the table.
         </param>
         <param name="frequency">
            Specifies an array of frequencies in the external attenuation table. This value is expressed in Hz.
            <br />
         </param>
         <param name="externalAttenuation">
            Specifies an array of attenuations corresponding to the frequency specified by the <em>frequency</em> parameter. This value is expressed in dB. 	<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.DeleteAllExternalAttenuationTables(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DeleteAllExternalAttenuationTables" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">

         <summary>
            Deletes all the external attenuation tables in the calibration plane specified by the <em>selectorString</em> parameter. On a MIMO session, this method deletes all the external attenuation tables for the specified MIMO port. <br /><em>supporteddevices</em>: PXIe-5663/5663E, PXIe-5665, PXIe-5668, PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842/5860<br />
         </summary>
         <param name="selectorString">
            Specifies the calibration plane name in which either S-parameter or external attenuation table is stored. This input accepts the calibration plane name with the <format type="monospace">"calplane::"</format> prefix. If you do not specify the calibration plane name, the default calibration plane instance is used.
            On a MIMO session, the default "" (empty string) deletes all the external attenuation tables for all MIMO Ports. To delete an external attenuation type for a specific MIMO port, use the port specifier with or without the calplane name. Example: <span class="monospace">"calplane::plane1/port::myrfsa1/0"</span>.
            <br />
            <note> For PXIe-5830/5831/5832 devices, port names should also be specified along with Calplane names. Hence, the valid selector is "calplane::&lt;calplaneName&gt;/port::&lt;portName&gt;". If you specify "port::all", all ports are  considered configured. For a MIMO port, the valid selector string is "calplane::&lt;calplaneName&gt;/port::&lt;deviceName&gt;/&lt;channelNumber&gt;/&lt;portName&gt;". If you specify "port::all", all MIMO ports are considered configured. Use RFmxInstrMX.GetAvailablePorts method to get the valid port names.</note>
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::all"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::if0"</format>
            </para>
            <para>
               <format type="monospace">"port::if0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::all"</format>
            </para>
            <para>
               <format type="monospace">"calplane::all/port::all"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::myrfsa1/0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::myrfsa1/0, port::myrfsa2/0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::myrfsa1/0/if0"</format>
            </para>
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.DisableCalibrationPlane(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DisableCalibrationPlane" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">

         <summary>
            Disables the calibration plane specified by the <em>selectorString</em> parameter for amplitude correction.<br /><em>supporteddevices</em>: PXIe-5663/5663E, PXIe-5665, PXIe-5668, PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842/5860<br />
         </summary>
         <param name="selectorString">
            Specifies the calibration plane name in which the external attenuation table is stored. This input accepts the calibration plane name with the <format type="monospace">"calplane::"</format> prefix. If you do not specify the calibration plane name, the default calibration plane instance is used. <para>
            </para>
            Example:<para>
            </para>
            <format type="monospace">""</format>
            <para>
            </para>
            <format type="monospace">
               <para>
               </para>
               "calplane::plane0"<para>
               </para>
               "calplane::all"
            </format>
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.EnableCalibrationPlane(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="EnableCalibrationPlane" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">

         <summary>
            Enables the calibration plane specified by the <em>selectorString</em> parameter for amplitude correction.<br /><em>supporteddevices</em>: PXIe-5663/5663E, PXIe-5665, PXIe-5668, PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842/5860<br />
         </summary>
         <param name="selectorString">
            Specifies the calibration plane name in which the external attenuation table or S-parameter is stored. This input accepts the calibration plane name with the <format type="monospace">"calplane::"</format> prefix. If you do not specify the calibration plane name, the default calibration plane instance is used. <para>
            </para>
            Example:<para>
            </para>
            <format type="monospace">""</format>
            <para>
            </para>
            <format type="monospace">
               <para>
               </para>
               "calplane::plane0"<para>
               </para>
               "calplane::all"
            </format>
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.DeleteExternalAttenuationTable(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DeleteExternalAttenuationTable" nihasget="0" nihasset="0" niparameters="selectorString,tableName" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Deletes the external attenuation table set by the <em>tableName</em> parameter in the calibration plane specified by the <em>selectorString</em> parameter. On a MIMO session, this method selects the active external attenuation table for the specified MIMO port. The specified table will be used for amplitude correction during measurement. <br /><em>supporteddevices</em>: PXIe-5663/5663E, PXIe-5665, PXIe-5668, PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842/5860<br />
         </summary>
         <param name="selectorString">
            Specifies the calibration plane name in which the external attenuation table is stored. This input accepts the calibration plane name with the "calplane::" prefix. If you do not specify the calibration plane name, the default calibration plane instance is used.
            On a MIMO session, the default "" (empty string) deletes the active external attenuation table for all the MIMO Ports. To delete an external attenuation type for a specific MIMO port, use the port specifier with or without the calplane name. Example: <span class="monospace">"calplane::plane1/port::myrfsa1/0"</span>.
            <br />
            <note> For PXIe-5830/5831/5832 devices, port names should also be specified along with Calplane names. Hence, the valid selector is "calplane::&lt;calplaneName&gt;/port::&lt;portName&gt;". If you specify "port::all", all ports are  considered configured. For a MIMO port, the valid selector string is "calplane::&lt;calplaneName&gt;/port::&lt;deviceName&gt;/&lt;channelNumber&gt;/&lt;portName&gt;". If you specify "port::all", all MIMO ports are considered configured. Use RFmxInstrMX.GetAvailablePorts method to get the valid port names.</note>
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::if0"</format>
            </para>
            <para>
               <format type="monospace">"port::if0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::all"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::myrfsa1/0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::myrfsa1/0, port::myrfsa2/0"</format>
            </para>
            <para>
               <format type="monospace">"calplane::plane0/port::myrfsa1/0/if0"</format>
            </para>
         </param>
         <param name="tableName">
            Specifies the name to be associated with external attenuation table within a calibration plane. Provide a unique name, such as <span class="monospace">"table1"</span> to configure the table.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSignalConfigurationNames(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,System.String[]@,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSignalConfigurationNames" nihasget="0" nihasset="0" niparameters="selectorString,personalityFilter,signalNames,personality" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,ref System.String[],ref NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities[]" nireturnvaluetype="System.Int32">

         <summary>
            Returns the signal names and corresponding personality type, for the personality type selected in the personalityFilter parameter.
         </summary>
         <param name="selectorString">Specifies the selector string. Pass an empty string.</param>
         <param name="personalityFilter">
            Specifies the personality filter to get the signal configuration names. You can specify one or more of the following personalities. The default value is All. To get all the signal names of SpecAn, personalityFilter parameter should be RFmxInstrMXPersonalities.SpecAn. To get the signal names of SpecAn and LTE, personalityFilter parameter should be RFmxInstrMXPersonalities.SpecAn and RFmxInstrMXPersonalities.Lte. To get the signal names of all personalities, personalityFilter parameter should be
            RFmxInstrMXPersonalities.All.
         </param>
         <param name="signalNames">Returns an array of the signal names. </param>
         <param name="personality">
            Returns an array of personalities where each entry corresponds to the personality of each signal name in the signalNames array.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetListNames(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,System.String[]@,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetListNames" nihasget="0" nihasset="0" niparameters="selectorString,personalityFilter,listNames,personality" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,ref System.String[],ref NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities[]" nireturnvaluetype="System.Int32">

         <summary>
            Returns the list names and the corresponding selected personality type from the <b>personalityFilter</b> parameter. When you set the <b>personalityFilter</b> parameter to all, this function returns the available list names for <b>all</b> supported personalities.
         </summary>
         <param name="selectorString">Specifies the selector string. Pass an empty string.</param>
         <param name="personalityFilter">
            Specifies the personality filter to get the list names. You can specify one or more personalities. The default value is All. To get all the list names of SpecAn, personalityFilter parameter should be RFmxInstrMXPersonalities.SpecAn. To get the list names of SpecAn and LTE, personalityFilter parameter should be RFmxInstrMXPersonalities.SpecAn and RFmxInstrMXPersonalities.Lte. To get the list names of all personalities, personalityFilter parameter should be
            RFmxInstrMXPersonalities.All.
         </param>
         <param name="listNames">Returns an array of the list names. </param>
         <param name="personality">
            Returns an array of personalities where each entry corresponds to the personality of each list name in the listNames array.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.CheckIfSignalExists(System.String,System.Boolean@,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="CheckIfSignalExists" nihasget="0" nihasset="0" niparameters="signalName,signalConfigurationExists,personality" niparametertypes="System.String,out System.Boolean,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities" nireturnvaluetype="System.Int32">

         <summary>
            Returns whether the signal you specify in the <em>signalname</em> parameter exists, and also returns the corresponding personality of the signal, if the signal exists. This method does not support an empty ("") signal name.<br />
         </summary>
         <param name="signalName">
            Specifies the name of the signal. This parameter accepts the signal name with or without the "signal::" prefix.
            <br />
         </param>
         <param name="signalConfigurationExists">
            Indicates whether the signal exists or not.
            <br />
         </param>
         <param name="personality">
            Indicates the personality of the signal if the signal exists.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.CheckIfListExists(System.String,System.Boolean@,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="CheckIfListExists" nihasget="0" nihasset="0" niparameters="listName,listExists,personality" niparametertypes="System.String,out System.Boolean,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities" nireturnvaluetype="System.Int32">

         <summary>
            Returns whether the list you specify in the <em>listname</em> parameter exists, and also returns the corresponding personality of the list, if the list exists. This method does not support an empty ("") list name.<br />
         </summary>
         <param name="listName">
            Specifies the name of the list. This parameter accepts the list name with or without the "list::" prefix.
            <br />
         </param>
         <param name="listExists">
            Indicates whether the list exists or not.
            <br />
         </param>
         <param name="personality">
            Indicates the personality of the list if the list exists.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.PingServer(System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PingServer" nihasget="0" nihasset="0" niparameters="isConnectionAlive" niparametertypes="out System.Boolean" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="isConnectionAlive">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.RequestPrivilege(NationalInstruments.RFmx.InstrMX.RFmxInstrMXClientPrivilegeLevel)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RequestPrivilege" nihasget="0" nihasset="0" niparameters="privilegeLevel" niparametertypes="NationalInstruments.RFmx.InstrMX.RFmxInstrMXClientPrivilegeLevel" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="privilegeLevel">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetPrivilegeLevel(System.Boolean@,NationalInstruments.RFmx.InstrMX.RFmxInstrMXClientPrivilegeLevel@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetPrivilegeLevel" nihasget="0" nihasset="0" niparameters="isConnectionAlive,privilegeLevel" niparametertypes="out System.Boolean,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXClientPrivilegeLevel" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="isConnectionAlive">missing content</param>
         <param name="privilegeLevel">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSignalConfigurationState(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState@,System.UInt64@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSignalConfigurationState" nihasget="0" nihasset="0" niparameters="signalName,personality,signalState,timeStamp" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState,out System.UInt64" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="signalName">missing content</param>
         <param name="personality">missing content</param>
         <param name="signalState">missing content</param>
         <param name="timeStamp">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSignalConfigurationState(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState@,System.UInt32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSignalConfigurationState" nihasget="0" nihasset="0" niparameters="signalName,personality,signalState,timeStamp" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState,out System.UInt32" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="signalName">missing content</param>
         <param name="personality">missing content</param>
         <param name="signalState">missing content</param>
         <param name="timeStamp">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetActiveResultName(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,System.String@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetActiveResultName" nihasget="0" nihasset="0" niparameters="signalName,personality,resultName,resultState" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,out System.String,out System.Int32" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="signalName">missing content</param>
         <param name="personality">missing content</param>
         <param name="resultName">missing content</param>
         <param name="resultState">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAllLoadedPersonalities(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAllLoadedPersonalities" nihasget="0" nihasset="0" niparameters="selectorString,personality" niparametertypes="System.String,ref NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="personality">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDebugForNamedResultsEnabled(System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetDebugForNamedResultsEnabled" nihasget="0" nihasset="0" niparameters="debugForNamedResultsEnabled" niparametertypes="out System.Boolean" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="debugForNamedResultsEnabled">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredDouble(System.String,System.Int32,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredDouble" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredInt(System.String,System.Int32,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredInt" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Int32" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredString(System.String,System.Int32,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredString" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.String" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredBool(System.String,System.Int32,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredBool" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Boolean" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredSByte(System.String,System.Int32,System.SByte@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredSByte" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.SByte" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredByte(System.String,System.Int32,System.Byte@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredByte" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Byte" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredShort(System.String,System.Int32,System.Int16@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredShort" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Int16" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredUShort(System.String,System.Int32,System.UInt16@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredUShort" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.UInt16" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredLong(System.String,System.Int32,System.Int64@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredLong" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Int64" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredFloat(System.String,System.Int32,System.Single@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredFloat" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Single" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredUInt(System.String,System.Int32,System.UInt32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredUInt" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.UInt32" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredByteArray(System.String,System.Int32,System.Byte[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredByteArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.Byte[]" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredSByteArray(System.String,System.Int32,System.SByte[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredSByteArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.SByte[]" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredIntArray(System.String,System.Int32,System.Int32[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredIntArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.Int32[]" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredUIntArray(System.String,System.Int32,System.UInt32[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredUIntArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.UInt32[]" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredLongArray(System.String,System.Int32,System.Int64[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredLongArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.Int64[]" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredULongArray(System.String,System.Int32,System.UInt64[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredULongArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.UInt64[]" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredFloatArray(System.String,System.Int32,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredFloatArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.Single[]" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredDoubleArray(System.String,System.Int32,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredDoubleArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.Double[]" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredComplexDoubleArray(System.String,System.Int32,NationalInstruments.ComplexDouble[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredComplexDoubleArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref NationalInstruments.ComplexDouble[]" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAttributeDesiredComplexSingleArray(System.String,System.Int32,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDesiredComplexSingleArray" nihasget="0" nihasset="0" niparameters="channelName,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.RegisterExternalRFSubsystemCallbacks(System.IntPtr,System.IntPtr[],System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RegisterExternalRFSubsystemCallbacks" nihasget="0" nihasset="0" niparameters="externalRFSubsystemContext,callbacks,callbackVersion" niparametertypes="System.IntPtr,System.IntPtr[],System.Int32" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="externalRFSubsystemContext">missing content</param>
         <param name="callbacks">missing content</param>
         <param name="callbackVersion">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.UnRegisterExternalRFSubsystemCallbacks" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="UnRegisterExternalRFSubsystemCallbacks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRFmxVersion(System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRFmxVersion" nihasget="0" nihasset="0" niparameters="RFmxVersion" niparametertypes="out System.String" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="RFmxVersion">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetInitiaitedSnapshotStrings(System.Int32[]@,System.String@,System.String@,System.String@,System.UInt64[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetInitiaitedSnapshotStrings" nihasget="0" nihasset="0" niparameters="personalityIDArray,signalNames,resultNames,snapshotIdentifiers,signalTimestampArray" niparametertypes="ref System.Int32[],out System.String,out System.String,out System.String,ref System.UInt64[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="personalityIDArray">missing content</param>
         <param name="signalNames">missing content</param>
         <param name="resultNames">missing content</param>
         <param name="snapshotIdentifiers">missing content</param>
         <param name="signalTimestampArray">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.DeleteSnapshot(System.Int32,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DeleteSnapshot" nihasget="0" nihasset="0" niparameters="personalityID,selectorString" niparametertypes="System.Int32,System.String" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="personalityID">missing content</param>
         <param name="selectorString">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLatestConfigurationSnapshot(System.Int32@,System.String@,System.String@,System.Int32@,System.UInt64@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetLatestConfigurationSnapshot" nihasget="0" nihasset="0" niparameters="personalityID,signalNames,snapshotIdentifier,signalConfigurationState,signalTimestamp" niparametertypes="out System.Int32,out System.String,out System.String,out System.Int32,out System.UInt64" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="personalityID">missing content</param>
         <param name="signalNames">missing content</param>
         <param name="snapshotIdentifier">missing content</param>
         <param name="signalConfigurationState">missing content</param>
         <param name="signalTimestamp">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SaveAllForRevert(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SaveAllForRevert" nihasget="0" nihasset="0" niparameters="filePath" niparametertypes="System.String" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="filePath">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.LoadAllForRevert(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LoadAllForRevert" nihasget="0" nihasset="0" niparameters="filePath" niparametertypes="System.String" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="filePath">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SelfCalibrate(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SelfCalibrate" nihasget="0" nihasset="0" niparameters="selectorString,stepsToOmit" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps" nireturnvaluetype="System.Int32">

         <summary>
            Self-calibrates the NI-RFSA device and associated modules that support self-calibration. If self-calibration completes successfully, the new calibration constants are stored immediately in the nonvolatile memory of the module. On a MIMO session, this method self-calibrates all NI-RFSA devices and associated modules that support self-calibration.<br />
            Refer to the specifications document for your device for more information about how often to self-calibrate. For more information about Self Calibrate, refer to the <em>niRFSA Self Cal method</em> topic for your device in the <em>NI RF Vector Signal Analyzers Help</em>.<br />
            For PXIe-5644/5645/5646, RFmx internally closes the RFSA session, performs self-calibration and opens a new session for the same device. If the RFSA session has been accessed from RFmx, using the RFmxInstr Get NIRFSA Session method before calling the RFmxInstr Self Calibrate method, the RFSA session will become invalid upon calling the RFmxInstr Self Calibrate.

            <em>supporteddevices</em>: PXIe-5663/5663E/5665/5668, PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5840/5841/5842/5860<br />
         </summary>
         <param name="selectorString">Specify an empty string as the value of this parameter.</param>
         <param name="stepsToOmit">
            Specifies which calibration steps to skip during the self-calibration process.
            The default value is an empty array, which indicates that all calibration steps are performed. The only valid value for PXIe-5820/5830/5831/5832/5840/5841/5842/5860 is an empty array.
            <list type="table">
               <item>
                  <term>PreselectorAlignment</term>
                  <description>Omits the Preselector Alignment step. If you omit this step and the NI-RFSA IsSelfCalibrationValid method indicates the calibration data for this step is invalid, the preselector alignment specifications are not guaranteed. This step applies only to the PXIe-5605/5606.</description>
               </item>
               <item>
                  <term>GainReference</term>
                  <description>Omits the Gain Reference step. If you omit this step and the NI-RFSA IsSelfCalibrationValid method indicates the calibration data for this step is invalid, the absolute accuracy of the device is not guaranteed. </description>
               </item>
               <item>
                  <term>IFFlatness</term>
                  <description>Omits the IF Flatness step. If you omit this step and the NI-RFSA IsSelfCalibrationValid method indicates the calibration data for this step is invalid, the IF flatness specifications are not guaranteed.</description>
               </item>
               <item>
                  <term>DigitizerSelfcal</term>
                  <description>Omits the Digitizer Self Cal step. If you omit this step and the NI-RFSA IsSelfCalibrationValid method indicates the calibration data for this step is invalid, the absolute accuracy of the device is not guaranteed.</description>
               </item>
               <item>
                  <term>LOSelfCal</term>
                  <description>Omits the LO Self Cal step. If you omit this step and the NI-RFSA IsSelfCalibrationValid method indicates the calibration data for this step is invalid, the LO PLL may fail to lock.</description>
               </item>
               <item>
                  <term>AmplitudeAccuracy</term>
                  <description>Not used by this method.</description>
               </item>
               <item>
                  <term>ResidualLOPower</term>
                  <description>Not used by this method.</description>
               </item>
               <item>
                  <term>ImageSuppression</term>
                  <description>Not used by this method.</description>
               </item>
               <item>
                  <term>SynthesizerAlignment</term>
                  <description>Not used by this method.</description>
               </item>
               <item>
                  <term>DCOffset</term>
                  <description>Not used by this method.</description>
               </item>
            </list>
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SelfCalibrateRange(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps,System.Double,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SelfCalibrateRange" nihasget="0" nihasset="0" niparameters="selectorString,stepsToOmit,minimumFrequency,maximumFrequency,minimumReferenceLevel,maximumReferenceLevel" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps,System.Double,System.Double,System.Double,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Self-calibrates all configurations within the specified frequency and reference level limits. If there is an open session for NI-RFSG for your device, it may remain open but cannot be used while this method runs. NI recommends that no external signals are present on the RF In port while the calibration is taking place. For more information about Self Calibrate Range, refer to the <em>niRFSA Self Calibrate Range</em> method topic for your device in the <em>NI RF Vector Signal Analyzers Help</em>. On a MIMO session, this method self-calibrates all NI-RFSA devices and associated modules that support self-calibration.<br /><em>supporteddevices:</em> PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5840/5841/5842/5860 <br />
            This method does not update self-calibration date and temperature. Self-calibration range data is not saved to your device if you restart the system.
         </summary>
         <param name="selectorString">Specify an empty string as the value of this parameter.</param>
         <param name="stepsToOmit">
            Specifies which calibration steps to skip during the self-calibration process.
            <list type="table">
               <item>
                  <term>PreselectorAlignment</term>
                  <description>Not used by this method.</description>
               </item>
               <item>
                  <term>GainReference</term>
                  <description>Not used by this method.</description>
               </item>
               <item>
                  <term>IFFlatness</term>
                  <description>Not used by this method.</description>
               </item>
               <item>
                  <term>DigitizerSelfcal</term>
                  <description>Not used by this method.</description>
               </item>
               <item>
                  <term>LOSelfCal</term>
                  <description>Omits the LO Self Cal step. If you omit this step and the NI-RFSA IsSelfCalibrationValid method indicates the calibration data for this step is invalid, the LO PLL may fail to lock.</description>
               </item>
               <item>
                  <term>AmplitudeAccuracy</term>
                  <description>Omits the Amplitude Accuracy step. If you omit this step, the absolute accuracy of the device is not adjusted. </description>
               </item>
               <item>
                  <term>ResidualLOPower</term>
                  <description>Omits the Residual LO Power step. If you omit this step, the Residual LO Power performance is not adjusted. </description>
               </item>
               <item>
                  <term>ImageSuppression</term>
                  <description>Omits the Image Suppression step. If you omit this step, the Residual Sideband Image performance is not adjusted.</description>
               </item>
               <item>
                  <term>SynthesizerAlignment</term>
                  <description>Omits the VCO Alignment step. If you omit this step, the LO PLL will not get adjusted. </description>
               </item>
               <item>
                  <term>DCOffset</term>
                  <description>Omits the DC Offset step.</description>
               </item>
            </list>
         </param>
         <param name="minimumFrequency">
            specifies the minimum frequency for the custom self calibration range. This value is expressed in Hz.
            <para/><note> For the PXIe-5830/5831/5832, only the applicable ports within the specified frequency range are calibrated.</note>
         </param>
         <param name="maximumFrequency">specifies the maximum frequency for the custom self calibration range. This value is expressed in Hz.</param>
         <param name="minimumReferenceLevel">
            specifies the minimum reference level for the custom self calibration range. This value is expressed in dBm.
         </param>
         <param name="maximumReferenceLevel">specifies the maximum reference level for the custom self calibration range. This value is expressed dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetTracesInfoForMonitorSnapshot(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetTracesInfoForMonitorSnapshot" nihasget="0" nihasset="0" niparameters="selectorString,allTracesEnabled" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="allTracesEnabled">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSnapshotState(NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSnapshotState" nihasget="0" nihasset="0" niparameters="personality,selectorString,snapshotState" niparametertypes="NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="personality">missing content</param>
         <param name="selectorString">missing content</param>
         <param name="snapshotState">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetErrorInfoFromSnapshot(NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,System.String,System.Int32@,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetErrorInfoFromSnapshot" nihasget="0" nihasset="0" niparameters="personality,selectorString,errorCode,errorDescription" niparametertypes="NationalInstruments.RFmx.InstrMX.RFmxInstrMXPersonalities,System.String,out System.Int32,out System.String" nireturnvaluetype="System.Int32">
         <exclude/>
      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetForceAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetForceAllTracesEnabled" nihasget="0" nihasset="0" niparameters="channelName,allTracesEnabled" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="channelName">missing content</param>
         <param name="allTracesEnabled">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetForceAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetForceAllTracesEnabled" nihasget="0" nihasset="0" niparameters="channelName,allTracesEnabled" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="channelName">missing content</param>
         <param name="allTracesEnabled">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.StopMonitoringAndClearAllSnapshots" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="StopMonitoringAndClearAllSnapshots" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetIQFrequencyOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetIQFrequencyOffset" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="channelName">missing content</param>
         <param name="value">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetIQFrequencyOffset(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetIQFrequencyOffset" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="channelName">missing content</param>
         <param name="value">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetCommonModeLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetCommonModeLevel" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the common-mode level presented at each differential input terminal. The common-mode level shifts both positive and negative terminals in the same direction. This must match the common-mode level of the device under test (DUT). This value is expressed in Volts.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the common-mode level presented at each differential input terminal. The common-mode level shifts both positive and negative terminals in the same direction. This must match the common-mode level of the device under test (DUT). This value is expressed in Volts. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.CommonModeLevel" crefType="PartiallyQualified" /> attribute.The default value is 0.Supported devices: PXIe-5820
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetCommonModeLevel(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetCommonModeLevel" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the common-mode level presented at each differential input terminal. The common-mode level shifts both positive and negative terminals in the same direction. This must match the common-mode level of the device under test (DUT). This value is expressed in Volts.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the common-mode level presented at each differential input terminal. The common-mode level shifts both positive and negative terminals in the same direction. This must match the common-mode level of the device under test (DUT). This value is expressed in Volts. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.CommonModeLevel" crefType="PartiallyQualified" /> attribute.The default value is 0.Supported devices: PXIe-5820
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetSmuResourceName(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetSmuResourceName" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the resource name assigned by Measurement and Automation Explorer (MAX) for NI Source Measure Units (SMU) which is used  as the noise source power supply for Noise Figure (NF) measurement, for example, PXI1Slot3, where PXI1Slot3 is an instrument resource name. SMU Resource Name can also be a logical IVI name.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the resource name assigned by Measurement and Automation Explorer (MAX) for NI Source Measure Units (SMU) which is used  as the noise source power supply for Noise Figure (NF) measurement, for example, PXI1Slot3, where PXI1Slot3 is an instrument resource name. SMU Resource Name can also be a logical IVI name.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SmuResourceName" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-4138, PXIe-4139, PXIe-4139 (40 W), and PXIe-4143 SMUs.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSmuResourceName(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSmuResourceName" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the resource name assigned by Measurement and Automation Explorer (MAX) for NI Source Measure Units (SMU) which is used  as the noise source power supply for Noise Figure (NF) measurement, for example, PXI1Slot3, where PXI1Slot3 is an instrument resource name. SMU Resource Name can also be a logical IVI name.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the resource name assigned by Measurement and Automation Explorer (MAX) for NI Source Measure Units (SMU) which is used  as the noise source power supply for Noise Figure (NF) measurement, for example, PXI1Slot3, where PXI1Slot3 is an instrument resource name. SMU Resource Name can also be a logical IVI name.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SmuResourceName" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-4138, PXIe-4139, PXIe-4139 (40 W), and PXIe-4143 SMUs.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetSmuChannel(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetSmuChannel" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the output channel to be used for noise figure (NF) measurement in RFmx.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the output channel to be used for noise figure (NF) measurement in RFmx.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SmuChannel" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSmuChannel(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSmuChannel" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the output channel to be used for noise figure (NF) measurement in RFmx.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the output channel to be used for noise figure (NF) measurement in RFmx.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SmuChannel" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetIOTraceStatus(System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetIOTraceStatus" nihasget="0" nihasset="0" niparameters="IOTraceStatus" niparametertypes="System.Boolean" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="IOTraceStatus">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSelfCalibrateLastDateAndTime(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps,System.DateTime@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSelfCalibrateLastDateAndTime" nihasget="0" nihasset="0" niparameters="selectorString,selfCalibrateStep,timestamp" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps,out System.DateTime" nireturnvaluetype="System.Int32">

         <summary>
            Gets the date and time of the last successful self-calibration.
            <para>
               <format type="bold">Supported Devices:</format> PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
            </para>
            <note type="note">
               For PXIe-5644/5645/5646 devices, you must select <format type="bold">ImageSuppression</format> for the <format type="italics">selfCalibrateStep</format> parameter.
            </note>
         </summary>
         <param name="selectorString">
            Specifies a selector string comprising of a MIMO port on a MIMO session. 
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"port::myrfsa1/0"</format>
            </para>
            You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="selfCalibrateStep">
            Identifies the self-calibration step to query for the last successful self-calibration date and time data. The default value is <format type="bold">PreselectorAlignment</format>.
         </param>
         <param name="timestamp">Upon return,  contains date and time of the last successful self-calibration </param>
         <returns>Returns the date and time of the last successful self-calibration.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSelfCalibrateLastTemperature(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSelfCalibrateLastTemperature" nihasget="0" nihasset="0" niparameters="selectorString,selfCalibrateStep,temperature" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the temperature of the last successful self-calibration. This value is expresed in degree Celsius. On a MIMO session, use the selectorString parameter to get the last successful self-calibration temperature for a specific MIMO port.
            <para>
               <format type="bold">Supported Devices:</format> PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831 (IF only)/5832 (IF only)/5840/5841/5842/5860
            </para>
            <note type="note">
               For PXIe-5644/5645/5646 devices, you must select <format type="bold">ImageSuppression</format> for the <format type="italics">selfCalibrateStep</format> parameter.
            </note>
         </summary>
         <param name="selectorString">
            Specifies a selector string comprising of a MIMO port on a MIMO session. 
            <para>
               <format type="bold">Example:</format>
            </para>
            <para>
               <format type="monospace">""</format>
            </para>
            <para>
               <format type="monospace">"port::myrfsa1/0"</format>
            </para>
            You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="selfCalibrateStep">
            Identifies
            the self-calibration step to query for the last successful self-calibration temperature data. The default value is <format type="bold">PreselectorAlignment</format>.
         </param>
         <param name="temperature">Upon return, contains the value of temperature at the last self-calibration. This value is expresed in degree Celsius.</param>
         <returns>Returns the temperature of the last successful self-calibration. This value is expresed in degree Celsius. </returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ConvertForPowerUnitsUtility(System.Double,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits,NationalInstruments.RFmx.InstrMX.RFmxInstrMXTerminalConfiguration,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ConvertForPowerUnitsUtility" nihasget="0" nihasset="0" niparameters="referenceOrTriggerLevelIn,inputPowerUnits,outputPowerUnits,terminalConfiguration,bandwidth,referenceOrTriggerLevelOut" niparametertypes="System.Double,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPowerUnits,NationalInstruments.RFmx.InstrMX.RFmxInstrMXTerminalConfiguration,System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="referenceOrTriggerLevelIn">missing content</param>
         <param name="inputPowerUnits">missing content</param>
         <param name="outputPowerUnits">missing content</param>
         <param name="terminalConfiguration">missing content</param>
         <param name="bandwidth">missing content</param>
         <param name="referenceOrTriggerLevelOut">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAvailablePorts(System.String[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAvailablePorts" nihasget="0" nihasset="0" niparameters="availablePorts" niparametertypes="out System.String[]" nireturnvaluetype="System.Int32">

         <summary>
            Gets the list of ports available for use based on your instrument configuration.
         </summary>
         <param name="availablePorts">
            Returns a list of available ports.
         </param>
         <returns>
            Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
         </returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAvailablePorts(System.String,System.String[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAvailablePorts" nihasget="0" nihasset="0" niparameters="selectorString,availablePorts" niparametertypes="System.String,ref System.String[]" nireturnvaluetype="System.Int32">

         <summary>
            Gets ports available for the session. On a MIMO session, this method fetches all the ports for the initialized MIMO ports.
         </summary>
         <param name="selectorString">Identifies the channel to which the settings must be applied. Specify an empty string as the value of this parameter.</param>
         <param name="availablePorts">
            Returns an array of available ports.
         </param>
         <returns>
            Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
         </returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAvailablePaths(System.String,System.String[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAvailablePaths" nihasget="0" nihasset="0" niparameters="selectorString,availablePaths" niparametertypes="System.String,ref System.String[]" nireturnvaluetype="System.Int32">

         <summary>
            Gets paths available for the session. On a MIMO session, this method fetches all the paths for the initialized MIMO paths.
         </summary>
         <param name="selectorString">Identifies the channel to which the settings must be applied. Specify an empty string as the value of this parameter.</param>
         <param name="availablePaths">
            Returns an array of available paths.
         </param>
         <returns>
            Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
         </returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAutomaticSGSASharedLO(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXAutomaticSGSASharedLO@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAutomaticSGSASharedLO" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXAutomaticSGSASharedLO" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>
            Gets whether RFmx automatically configures the signal analyzer to use the LO utilized by the signal generator on the same Vector Signal Transceiver (VST) based on the configured measurements.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains whether RFmx automatically configures the signal analyzer to use the LO utilized by the signal generator on the same Vector Signal Transceiver (VST) based on the configured measurements. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AutomaticSGSASharedLO" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAutomaticSGSASharedLO.Disabled" crefType="PartiallyQualified" />.Supported devices: PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAutomaticSGSASharedLO(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXAutomaticSGSASharedLO)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAutomaticSGSASharedLO" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXAutomaticSGSASharedLO" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>
            Sets whether RFmx automatically configures the signal analyzer to use the LO utilized by the signal generator on the same Vector Signal Transceiver (VST) based on the configured measurements.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies whether RFmx automatically configures the signal analyzer to use the LO utilized by the signal generator on the same Vector Signal Transceiver (VST) based on the configured measurements. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AutomaticSGSASharedLO" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXAutomaticSGSASharedLO.Disabled" crefType="PartiallyQualified" />.Supported devices: PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSession(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSession" nihasget="0" nihasset="0" niparameters="resourceName,optionString" niparametertypes="System.String,System.String" nireturnvaluetype="NationalInstruments.RFmx.InstrMX.RFmxInstrMX">

         <summary>
            Gets a session, if it exists for given resource name; else, returns a new one.
         </summary>
         <param name="resourceName">Specifies the resource name of the device to initialize.</param>
         <param name="optionString">
            Sets the initial value of certain properties for the session.The following attributes are used in this parameter: RFmxSetup,Simulate,AnalysisOnly.
            To simulate a device using the NI 5622 (25 MHz) digitizer, set the Digitizer field to 5622_25MHz_DDC and the Simulate field to 1 You can set the Digitizerfield to 5622_25MHz_DDC only when using the NI 5665.
            To use AnalysisOnly mode, specify the string as "AnalysisOnly=1". In this mode, user is responsible for waveform acquisition and RFmx driver will perform analysis on user specified IQ waveform or Spectrum. Use personality specific Analyze functions to perform measurements.
            To set multiple attributes, separate their assignments with a comma.
         </param>
         <returns>Returns an object of type RFmxInstrMX.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSession(System.String[],System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSession" nihasget="0" nihasset="0" niparameters="resourceName,optionString" niparametertypes="System.String[],System.String" nireturnvaluetype="NationalInstruments.RFmx.InstrMX.RFmxInstrMX">

         <summary>
            Gets a session, if it exists for given set of resource name; else, returns a new one.
         </summary>
         <param name="resourceName">Specifies the resource name of the device to initialize.</param>
         <param name="optionString">
            Sets the initial value of certain properties for the session.The following attributes are used in this parameter: RFmxSetup,Simulate,AnalysisOnly.
            To simulate a device using the NI 5622 (25 MHz) digitizer, set the Digitizer field to 5622_25MHz_DDC and the Simulate field to 1 You can set the Digitizerfield to 5622_25MHz_DDC only when using the NI 5665.
            To use AnalysisOnly mode, specify the string as "AnalysisOnly=1". In this mode, user is responsible for waveform acquisition and RFmx driver will perform analysis on user specified IQ waveform or Spectrum. Use personality specific Analyze functions to perform measurements.
            To set multiple attributes, separate their assignments with a comma.
         </param>
         <returns>Returns an object of type RFmxInstrMX.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSessionFromNIRfsaHandle(System.IntPtr)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSessionFromNIRfsaHandle" nihasget="0" nihasset="0" niparameters="niRfsaHandle" niparametertypes="System.IntPtr" nireturnvaluetype="NationalInstruments.RFmx.InstrMX.RFmxInstrMX">

         <summary>
            Gets a session, if it exists for given NIRfsa instrument handle; else, returns a new one.
            <note type="note">
               <para>1. Do not close the NI-RFSA driver session before calling RFmx close. Closing the NI-RFSA driver session before closing RFmx session would lead to unpredictable behavior.</para>
               <para>
                  2. Closing the RFmx session will not close the NI-RFSA driver session.
               </para>
            </note>
         </summary>
         <param name="niRfsaHandle">
            Sets the initial value of certain properties for the session.The following attributes are used in this parameter: RFmxSetup,Simulate,AnalysisOnly.
            To simulate a device using the NI 5622 (25 MHz) digitizer, set the Digitizer field to 5622_25MHz_DDC and the Simulate field to 1 You can set the Digitizerfield to 5622_25MHz_DDC only when using the NI 5665.
            To use AnalysisOnly mode, specify the string as "AnalysisOnly=1". In this mode, user is responsible for waveform acquisition and RFmx driver will perform analysis on user specified IQ waveform or Spectrum. Use personality specific Analyze functions to perform measurements.
            To set multiple attributes, separate their assignments with a comma.
         </param>
         <remarks>
            Ensure to keep the NIRfsa .NET object that encapsulates the niRfsaHandle used to get the RFmxInstr .NET object from this function alive while using the RFmxInstrMX .NET object.
            In case the NIRfsa .NET object that encapsulates the niRfsaHandle used to get the RFmxInstr .NET object from this function is disposed or closed the corresponding RFmxInstrMX .NET object will stop working.
         </remarks>
         <returns>Returns an object of type RFmxInstrMX.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSessionFromNIRfsaHandles(System.IntPtr[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSessionFromNIRfsaHandles" nihasget="0" nihasset="0" niparameters="niRfsaHandles" niparametertypes="System.IntPtr[]" nireturnvaluetype="NationalInstruments.RFmx.InstrMX.RFmxInstrMX">

         <summary>
            Gets a session, if it exists for given set of NIRfsa instrument handle; else, returns a new one.
            <note type="note">
               <para>1. Do not close the NI-RFSA driver session before calling RFmx close. Closing the NI-RFSA driver session before closing RFmx session would lead to unpredictable behavior.</para>
               <para>
                  2. Closing the RFmx session will not close the NI-RFSA driver session.
               </para>
            </note>
         </summary>
         <param name="niRfsaHandles">
            Sets the initial value of certain properties for the session.The following attributes are used in this parameter: RFmxSetup,Simulate,AnalysisOnly.
            To simulate a device using the NI 5622 (25 MHz) digitizer, set the Digitizer field to 5622_25MHz_DDC and the Simulate field to 1 You can set the Digitizerfield to 5622_25MHz_DDC only when using the NI 5665.
            To use AnalysisOnly mode, specify the string as "AnalysisOnly=1". In this mode, user is responsible for waveform acquisition and RFmx driver will perform analysis on user specified IQ waveform or Spectrum. Use personality specific Analyze functions to perform measurements.
            To set multiple attributes, separate their assignments with a comma.
         </param>
         <remarks>
            Ensure to keep the NIRfsa .NET object that encapsulates the niRfsaHandle used to get the RFmxInstr .NET object from this function alive while using the RFmxInstrMX .NET object.
            In case the NIRfsa .NET object that encapsulates the niRfsaHandle used to get the RFmxInstr .NET object from this function is disposed or closed the corresponding RFmxInstrMX .NET object will stop working.
         </remarks>
         <returns>Returns an object of type RFmxInstrMX.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSession(System.String,System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSession" nihasget="0" nihasset="0" niparameters="resourceName,optionString,isNewSession" niparametertypes="System.String,System.String,out System.Boolean" nireturnvaluetype="NationalInstruments.RFmx.InstrMX.RFmxInstrMX">

         <summary>
            Gets a session, if it exists for given resource name; else, returns a new one.
         </summary>
         <param name="resourceName">Specifies the resource name of the device to initialize.</param>
         <param name="optionString">
            Sets the initial value of certain properties for the session.The following attributes are used in this parameter: RFmxSetup,Simulate,AnalysisOnly.
            To simulate a device using the NI 5622 (25 MHz) digitizer, set the Digitizer field to 5622_25MHz_DDC and the Simulate field to 1 You can set the Digitizerfield to 5622_25MHz_DDC only when using the NI 5665.
            To use AnalysisOnly mode, specify the string as "AnalysisOnly=1". In this mode, user is responsible for waveform acquisition and RFmx driver will perform analysis on user specified IQ waveform or Spectrum. Use personality specific Analyze functions to perform measurements.
            To set multiple attributes, separate their assignments with a comma.
         </param>
         <param name="isNewSession">
            <see langword="True"/> if new session is created; otherwise <see langword="False"/>.
         </param>
         <returns>Returns an object of type RFmxInstrMX.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSession(System.String[],System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSession" nihasget="0" nihasset="0" niparameters="resourceName,optionString,isNewSession" niparametertypes="System.String[],System.String,out System.Boolean" nireturnvaluetype="NationalInstruments.RFmx.InstrMX.RFmxInstrMX">

         <summary>
            Gets a session, if it exists for given set of resource name; else, returns a new one.
         </summary>
         <param name="resourceName">Specifies the resource name of the device to initialize.</param>
         <param name="optionString">
            Sets the initial value of certain properties for the session.The following attributes are used in this parameter: RFmxSetup,Simulate,AnalysisOnly.
            To simulate a device using the NI 5622 (25 MHz) digitizer, set the Digitizer field to 5622_25MHz_DDC and the Simulate field to 1 You can set the Digitizerfield to 5622_25MHz_DDC only when using the NI 5665.
            To use AnalysisOnly mode, specify the string as "AnalysisOnly=1". In this mode, user is responsible for waveform acquisition and RFmx driver will perform analysis on user specified IQ waveform or Spectrum. Use personality specific Analyze functions to perform measurements.
            To set multiple attributes, separate their assignments with a comma.
         </param>
         <param name="isNewSession">
            <see langword="True"/> if new session is created; otherwise <see langword="False"/>.
         </param>
         <returns>Returns an object of type RFmxInstrMX.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRFAttenuationValue(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRFAttenuationValue" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the nominal attenuation setting for all attenuators before the first mixer in the RF signal chain. This value is expressed in dB.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the nominal attenuation setting for all attenuators before the first mixer in the RF signal chain. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFAttenuationValue" crefType="PartiallyQualified" /> attribute.The valid values for this property depend on the device configuration. Supported devices: PXIe-5663/5663E/5603/5605/5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetRFAttenuationValue(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetRFAttenuationValue" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the nominal attenuation setting for all attenuators before the first mixer in the RF signal chain. This value is expressed in dB.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the nominal attenuation setting for all attenuators before the first mixer in the RF signal chain. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFAttenuationValue" crefType="PartiallyQualified" /> attribute.The valid values for this property depend on the device configuration. Supported devices: PXIe-5663/5663E/5603/5605/5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRFAttenuationAuto(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXRFAttenuationAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRFAttenuationAuto" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXRFAttenuationAuto" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether RFmx computes the RF attenuation.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains whether RFmx computes the RF attenuation. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFAttenuationAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRFAttenuationAuto.True" crefType="PartiallyQualified" />.Supported devices: PXIe-5663/5663E, PXIe-5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetRFAttenuationAuto(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXRFAttenuationAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetRFAttenuationAuto" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXRFAttenuationAuto" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether RFmx computes the RF attenuation.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies whether RFmx computes the RF attenuation. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFAttenuationAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRFAttenuationAuto.True" crefType="PartiallyQualified" />.Supported devices: PXIe-5663/5663E, PXIe-5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetMechanicalAttenuationValue(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetMechanicalAttenuationValue" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the level of mechanical attenuation for the RF path. This value is expressed in dB.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the level of mechanical attenuation for the RF path. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.MechanicalAttenuationValue" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E, PXIe-5665, PXIe-5668Valid valuesPXIe-5663/5663E0, 16PXIe-5665 (3.6 GHz)0, 10, 20, 30PXIe-5665 (14 GHz), PXIe-56680, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetMechanicalAttenuationValue(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetMechanicalAttenuationValue" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the level of mechanical attenuation for the RF path. This value is expressed in dB.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the level of mechanical attenuation for the RF path. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.MechanicalAttenuationValue" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E, PXIe-5665, PXIe-5668Valid valuesPXIe-5663/5663E0, 16PXIe-5665 (3.6 GHz)0, 10, 20, 30PXIe-5665 (14 GHz), PXIe-56680, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetMechanicalAttenuationAuto(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXMechanicalAttenuationAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetMechanicalAttenuationAuto" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXMechanicalAttenuationAuto" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether RFmx chooses an attenuation setting based on the hardware settings.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains whether RFmx chooses an attenuation setting based on the hardware settings. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.MechanicalAttenuationAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXMechanicalAttenuationAuto.True" crefType="PartiallyQualified" />.Supported devices: PXIe-5663/5663E/5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetMechanicalAttenuationAuto(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXMechanicalAttenuationAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetMechanicalAttenuationAuto" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXMechanicalAttenuationAuto" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether RFmx chooses an attenuation setting based on the hardware settings.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies whether RFmx chooses an attenuation setting based on the hardware settings. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.MechanicalAttenuationAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXMechanicalAttenuationAuto.True" crefType="PartiallyQualified" />.Supported devices: PXIe-5663/5663E/5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetFrequencyReferenceFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyReferenceFrequency" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the Reference Clock rate, when the Frequency Reference Source method is set to ClkIn or RefIn. This value is expressed in Hz.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the Reference Clock rate, when the Frequency Reference Source method is set to ClkIn or RefIn. This value is expressed in Hz. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FrequencyReferenceFrequency" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860. The default value is 10 MHz.Valid valuesPXIe-5644/5645/5646, PXIe-5663/5663E, PXIe-5820/5830/5831/5832/5840/5841/5842: 10 MHzPXIe-5665/5668: 5 MHz to 100 MHz (inclusive), in increments of 1 MHz,PXIe-5860: 10 MHz, 100 MHz .
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetFrequencyReferenceFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetFrequencyReferenceFrequency" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the Reference Clock rate, when the Frequency Reference Source method is set to ClkIn or RefIn. This value is expressed in Hz.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the Reference Clock rate, when the Frequency Reference Source method is set to ClkIn or RefIn. This value is expressed in Hz. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FrequencyReferenceFrequency" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860. The default value is 10 MHz.Valid valuesPXIe-5644/5645/5646, PXIe-5663/5663E, PXIe-5820/5830/5831/5832/5840/5841/584210 MHzPXIe-5665/56685 MHz to 100 MHz (inclusive), in increments of 1 MHz, PXIe-5860: 10 MHz, 100 MHz .
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetFrequencyReferenceSource(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetFrequencyReferenceSource" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the frequency reference source.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the frequency reference source.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FrequencyReferenceSource" crefType="PartiallyQualified" /> attribute.The default value foor PXIe-5840 with PXIe-5653 is RefIn2, else the default value is OnboardClock.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetFrequencyReferenceSource(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyReferenceSource" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the frequency reference source.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the frequency reference source.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FrequencyReferenceSource" crefType="PartiallyQualified" /> attribute.The default value foor PXIe-5840 with PXIe-5653 is RefIn2, else the default value is OnboardClock.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLO2ExportEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLO2ExportEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetLO2ExportEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLO2ExportEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the LO2 OUT terminals in the installed devices.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies whether to enable the LO2 OUT terminals in the installed devices.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LO2ExportEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLO2ExportEnabled.Disabled" crefType="PartiallyQualified" />.Supported Devices: PXIe-5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLO2ExportEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLO2ExportEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetLO2ExportEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXLO2ExportEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the LO2 OUT terminals in the installed devices.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains whether to enable the LO2 OUT terminals in the installed devices.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LO2ExportEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLO2ExportEnabled.Disabled" crefType="PartiallyQualified" />.Supported Devices: PXIe-5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLOExportEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetLOExportEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the LO OUT terminals on the installed devices.
         </summary>
         <param name="channelName">
            Specifies the  losource number and port number.<br /> Example:<br /> "port0" or <br />"port0/ losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains whether to enable the LO OUT terminals on the installed devices.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOExportEnabled" crefType="PartiallyQualified" /> attribute.Default value:PXIe-5663/5663E: TRUE PXIe-5644/5645/5646, PXIe-5665/5668, PXIe-5830/5831/5832/5840/5841/5842: FALSESupported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOExportEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetLOExportEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the LO OUT terminals on the installed devices.
         </summary>
         <param name="channelName">
            Specifies the  losource number and port number.<br /> Example:<br /> "port0" or <br />"port0/losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies whether to enable the LO OUT terminals on the installed devices.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOExportEnabled" crefType="PartiallyQualified" /> attribute.Default value:PXIe-5663/5663E: TRUE PXIe-5644/5645/5646, PXIe-5665/5668, PXIe-5830/5831/5832/5840/5841/5842: FALSESupported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetFrequencyReferenceExportedTerminal(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyReferenceExportedTerminal" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets a comma-separated list of the terminals at which to export the frequency reference.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains a comma-separated list of the terminals at which to export the frequency reference.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FrequencyReferenceExportedTerminal" crefType="PartiallyQualified" /> attribute.The default value is RFMXINSTR_VAL_NONE_STR.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetFrequencyReferenceExportedTerminal(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetFrequencyReferenceExportedTerminal" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets a comma-separated list of the terminals at which to export the frequency reference.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies a comma-separated list of the terminals at which to export the frequency reference.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FrequencyReferenceExportedTerminal" crefType="PartiallyQualified" /> attribute.The default value is RFMXINSTR_VAL_NONE_STR.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetTriggerExportOutputTerminal(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetTriggerExportOutputTerminal" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the destination terminal for the exported Reference Trigger. You can also choose not to export any signal.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the destination terminal for the exported Reference Trigger. You can also choose not to export any signal.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.TriggerExportOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.Supported devices: PXIe-5644/5645/5646 and PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetTriggerExportOutputTerminal(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetTriggerExportOutputTerminal" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the destination terminal for the exported Reference Trigger. You can also choose not to export any signal.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the destination terminal for the exported Reference Trigger. You can also choose not to export any signal.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.TriggerExportOutputTerminal" crefType="PartiallyQualified" /> attribute.The default value is  Do not export signal.Supported devices: PXIe-5644/5645/5646 and PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetTriggerTerminalName(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetTriggerTerminalName" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the fully-qualified signal name as a string. <para>The standard format is as follows:</para>
            <uList>
               <listItem>
                  <para></para>
                  <format type="bold">PXIe-5820/5840/5841/5842</format>: <format type="italic">/ModuleName/ai/0/RefTrigger</format>, where <format type="italic">ModuleName</format> is the name of your device in MAX.
               </listItem>
               <para></para>
               <listItem>
                  <format type="bold">PXIe-5830/5831/5832</format>: <format type="italic">/BasebandModule/ai/0/RefTrigger</format>, where <format type="italic">BasebandModule</format> is the name of your device in MAX.
               </listItem>
			   <para></para>
               <listItem>
                  <format type="bold">PXIe-5860</format>: <format type="italic">/ModuleName/ai/ChannelNumber/RefTrigger,</format>, where <format type="italic">ModuleName </format> is the name of your device in MAX and ChannelNumber is the channel number (0 or 1).
               </listItem>
               <para></para>
               <listItem>
                  <format type="bold">All other devices</format>: <format type="italic"> /DigitizerName/RefTrigger</format>, where <format type="italic">DigitizerName</format> is the name of your associated digitizer module in MAX.
               </listItem>
            </uList>
            <para>
               <format type="bold">Supported devices</format>: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
            </para>
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the fully qualified signal name as a string.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.TriggerTerminalName" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDeviceTemperature(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetDeviceTemperature" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the current temperature of the module. This value is expressed in degrees Celsius.
         </summary>
         <param name="channelName">
            Specifies the  module number and port number.<br /> Example:<br /> "port0" or <br />"port0/module0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildModuleString(System.String,System.String)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the current temperature of the module. This value is expressed in degrees Celsius.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DeviceTemperature" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDigitizerTemperature(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetDigitizerTemperature" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the current temperature of the digitizer module. This value is expressed in degrees Celsius.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the current temperature of the digitizer module. This value is expressed in degrees Celsius.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DigitizerTemperature" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLOTemperature(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetLOTemperature" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the current temperature of the LO module associated with the device. This value is expressed in degrees Celsius.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the current temperature of the LO module associated with the device. This value is expressed in degrees Celsius.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOTemperature" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetPreselectorPresent(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetPreselectorPresent" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Indicates whether a preselector is available on the RF downconverter module.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Indicates whether a preselector is available on the RF downconverter module. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.PreselectorPresent" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRecommendedAcquisitionType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedAcquisitionType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRecommendedAcquisitionType" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedAcquisitionType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the recommended acquisition type for the last committed measurement configuration. <br/>
            This method is supported when <br/>
            1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
            2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this method.<br/>
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the recommended acquisition type for the last committed measurement configuration.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedAcquisitionType" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRecommendedCenterFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRecommendedCenterFrequency" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the recommended center frequency of the RF signal. This value is expressed in Hz.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this method.<br/>
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the recommended center frequency of the RF signal. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedCenterFrequency" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRecommendedIQAcquisitionTime(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRecommendedIQAcquisitionTime" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the recommended acquisition time for I/Q acquisition, in seconds.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this method.<br/>
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the recommended acquisition time for I/Q acquisition, in seconds.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedIQAcquisitionTime" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRecommendedIQMinimumSampleRate(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRecommendedIQMinimumSampleRate" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the recommended minimum sample rate for I/Q acquisition, in Hz.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this method.<br/>
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the recommended minimum sample rate for I/Q acquisition, in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedIQMinimumSampleRate" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRecommendedIQPreTriggerTime(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRecommendedIQPreTriggerTime" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the recommended pretrigger time for I/Q acquisition, in seconds. <br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this method.<br/>
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the recommended pretrigger time for I/Q acquisition, in seconds.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedIQPreTriggerTime" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRecommendedNumberOfRecords(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRecommendedNumberOfRecords" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the recommended number of records to acquire to complete measurement averaging.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this method.<br/>
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the recommended number of records to acquire to complete measurement averaging.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedNumberOfRecords" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRecommendedSpectralAcquisitionSpan(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRecommendedSpectralAcquisitionSpan" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the recommended acquisition span for spectral acquisition, in Hz.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this method.<br/>
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the recommended acquisition span for spectral acquisition, in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedSpectralAcquisitionSpan" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRecommendedSpectralFftWindow(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedSpectralFftWindow@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRecommendedSpectralFftWindow" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedSpectralFftWindow" nireturnvaluetype="System.Int32">

         <summary>
            Gets the recommended FFT window type for spectral acquisition.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this method.<br/>
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the recommended FFT window type for spectral acquisition.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedSpectralFftWindow" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRecommendedSpectralResolutionBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRecommendedSpectralResolutionBandwidth" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the recommended FFT bin width for spectral acquisition. This value is expressed in Hz.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this method.<br/>
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the recommended FFT bin width for spectral acquisition. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedSpectralResolutionBandwidth" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRecommendedTriggerMinimumQuietTime(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRecommendedTriggerMinimumQuietTime" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the recommended minimum quiet time during which the signal level must be below the trigger value for triggering to occur. This value is expressed in seconds.<br/>
         This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this method.<br/>
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the recommended minimum quiet time during which the signal level must be below the trigger value for triggering to occur. This value is expressed in seconds.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RecommendedTriggerMinimumQuietTime" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRFPreampPresent(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRFPreampPresent" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Indicates whether an RF preamplifier is available on the RF downconverter module.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Indicates whether an RF preamplifier is available on the RF downconverter module. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFPreampPresent" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetInstrumentFirmwareRevision(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetInstrumentFirmwareRevision" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets a string containing the firmware revision information of the RF downconverter for the composite device you are currently using.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains a string containing the firmware revision information of the RF downconverter for the composite device you are currently using.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.InstrumentFirmwareRevision" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetInstrumentModel(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetInstrumentModel" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets a string that contains the model number or name of the RF device that you are currently using.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains a string that contains the model number or name of the RF device that you are currently using.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.InstrumentModel" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetModuleRevision(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetModuleRevision" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the revision of the RF downconverter module.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the revision of the RF downconverter module.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ModuleRevision" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842. For PXIe-5644/5645/5646 and PXIe-5820/5830/5831/5832/5840/5841/5842/5860, this method returns the revision of the VST module.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSerialNumber(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSerialNumber" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the serial number of the RF downconverter module.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the serial number of the RF downconverter module.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SerialNumber" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetFrequencySettling(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencySettling" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value used for LO frequency settling.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the value used for LO frequency settling.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FrequencySettling" crefType="PartiallyQualified" /> attribute.The default value is 0.1. Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetFrequencySettling(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetFrequencySettling" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value used for LO frequency settling.
            Specify the units and interpretation for this scalar value using the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetFrequencySettlingUnits(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXFrequencySettlingUnits)"/> method.
            <note type="note">
               This method is not supported if you are using an external LO.
            </note>
            <para>
               <format type="bold">Supported devices</format>: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5830/5831/5832/5840/5841/5842/5860
            </para>
         </summary>
         <param name="channelName">Identifies the channel to which the settings must be applied. Specify an empty string as the value of this parameter.</param>
         <param name="value">Specifies the value used for LO frequency settling.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDownconverterCenterFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetDownconverterCenterFrequency" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Enables in-band retuning and specifies the current frequency of the RF downconverter. This value is expressed in Hz.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Enables in-band retuning and specifies the current frequency of the RF downconverter. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DownconverterCenterFrequency" crefType="PartiallyQualified" /> attribute.The default value is the carrier frequency or spectrum center frequency. Valid Values: Any supported tuning frequency of the devicePXIe-5820: The only valid value for this property is 0 Hz.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetDownconverterCenterFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetDownconverterCenterFrequency" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Enables in-band retuning and specifies the current frequency of the RF downconverter. This value is expressed in Hz.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Enables in-band retuning and specifies the current frequency of the RF downconverter. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DownconverterCenterFrequency" crefType="PartiallyQualified" /> attribute.The default value is the carrier frequency or spectrum center frequency. Valid Values: Any supported tuning frequency of the devicePXIe-5820: The only valid value for this property is 0 Hz.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetMixerLevelOffset(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetMixerLevelOffset" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of dB by which to adjust the device mixer level.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the number of dB by which to adjust the device mixer level.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.MixerLevelOffset" crefType="PartiallyQualified" /> attribute.The default value is 0. The default value specifies device settings that are the best compromise between distortion and noise. Supported devices: PXIe-5663/5663E/5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetMixerLevelOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetMixerLevelOffset" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of dB by which to adjust the device mixer level.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the number of dB by which to adjust the device mixer level.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.MixerLevelOffset" crefType="PartiallyQualified" /> attribute.The default value is 0. The default value specifies device settings that are the best compromise between distortion and noise. Supported devices: PXIe-5663/5663E/5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetMixerLevel(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetMixerLevel" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mixer level, in dBm.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the mixer level, in dBm. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.MixerLevel" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668Default valuesPXIe-5665/5668-10All other devicesN/AThe valid values for this property depend on your device configuration.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetMixerLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetMixerLevel" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the mixer level, in dBm.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the mixer level, in dBm. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.MixerLevel" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663/5663E/5665/5668Default valuesPXIe-5665/5668-10All other devicesN/AThe valid values for this property depend on your device configuration.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetIFFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetIFFilterBandwidth" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the IF filter path bandwidth for your device configuration.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the IF filter path bandwidth for your device configuration.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.IFFilterBandwidth" crefType="PartiallyQualified" /> attribute.RFmx chooses an appropriate IF filter as default IF Filter based on measurement configuration, center frequency, cleaner spectrum and downconverter preselector.Supported devices: PXIe-5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetIFFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetIFFilterBandwidth" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the IF filter path bandwidth for your device configuration.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the IF filter path bandwidth for your device configuration.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.IFFilterBandwidth" crefType="PartiallyQualified" /> attribute.RFmx chooses an appropriate IF filter as default IF Filter based on measurement configuration, center frequency, cleaner spectrum and downconverter preselector.Supported devices: PXIe-5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetIFOutputPowerLevelOffset(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetIFOutputPowerLevelOffset" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power offset by which to adjust the default IF output power level. This value is expressed in dB.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the power offset by which to adjust the default IF output power level. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.IFOutputPowerLevelOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.Supported devices: PXIe-5663/5663E/5665, PXIe-5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetIFOutputPowerLevelOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetIFOutputPowerLevelOffset" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the power offset by which to adjust the default IF output power level. This value is expressed in dB.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the power offset by which to adjust the default IF output power level. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.IFOutputPowerLevelOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.Supported devices: PXIe-5663/5663E/5665, PXIe-5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetPhaseOffset(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetPhaseOffset" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the offset to apply to the initial I and Q phases.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the offset to apply to the initial I and Q phases.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.PhaseOffset" crefType="PartiallyQualified" /> attribute.The default value is 0. Valid values are –180 degrees to 180 degrees, inclusive.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetPhaseOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetPhaseOffset" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the offset to apply to the initial I and Q phases.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the offset to apply to the initial I and Q phases.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.PhaseOffset" crefType="PartiallyQualified" /> attribute.The default value is 0. Valid values are –180 degrees to 180 degrees, inclusive.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetFftWidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetFftWidth" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the FFT width of the device. The FFT width is the effective bandwidth of the signal path during each signal acquisition.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the FFT width of the device. The FFT width is the effective bandwidth of the signal path during each signal acquisition. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FftWidth" crefType="PartiallyQualified" /> attribute.The lower limit for all devices that support setting the FFT Width property is 7.325 kHz.Supported devices: PXIe-5663/5663E/5665, PXIe-5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetFftWidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetFftWidth" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the FFT width of the device. The FFT width is the effective bandwidth of the signal path during each signal acquisition.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the FFT width of the device. The FFT width is the effective bandwidth of the signal path during each signal acquisition. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FftWidth" crefType="PartiallyQualified" /> attribute.The lower limit for all devices that support setting the FFT Width property is 7.325 kHz.Supported devices: PXIe-5663/5663E/5665, PXIe-5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetTuningSpeed(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXTuningSpeed@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetTuningSpeed" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXTuningSpeed" nireturnvaluetype="System.Int32">

         <summary>
            Makes tradeoffs between tuning speed and phase noise.
         </summary>
         <param name="channelName">
            Specifies the losource number.<br /> Example: "losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Makes tradeoffs between tuning speed and phase noise.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.TuningSpeed" crefType="PartiallyQualified" /> attribute. Default value: Normal for PXIe-5663/5663E/5665/5668,  Medium for PXIe-5644/5645/5646 and PXIe-5830/5831/5832/5840/5841/5842. Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5830/5831/5832/5840/5841/5842. The PXIe-5830/5831/5832/5840/5841/5842 supports only Medium for this method.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetTuningSpeed(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXTuningSpeed)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetTuningSpeed" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXTuningSpeed" nireturnvaluetype="System.Int32">

         <summary>
            Makes tradeoffs between tuning speed and phase noise.
         </summary>
         <param name="channelName">
            Specifies the losource number.<br /> Example: "losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Makes tradeoffs between tuning speed and phase noise.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.TuningSpeed" crefType="PartiallyQualified" /> attribute.Default value: Normaal for PXIe-5663/5663E/5665/5668,  Medium for PXIe-5644/5645/5646 and PXIe-5830/5831/5832/5840/5841/5842. Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5830/5831/5832/5840/5841/5842. PXIe-5830/5831/5832/5840/5841/5842 supports only Medium for this method.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetFrequencySettlingUnits(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXFrequencySettlingUnits@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencySettlingUnits" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXFrequencySettlingUnits" nireturnvaluetype="System.Int32">

         <summary>
            Gets the delay duration units and interpretation for LO settling.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the delay duration units and interpretation for LO settling.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.FrequencySettlingUnits" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXFrequencySettlingUnits.Ppm" crefType="PartiallyQualified" />.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetFrequencySettlingUnits(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXFrequencySettlingUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetFrequencySettlingUnits" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXFrequencySettlingUnits" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value used for LO frequency settling. Specify the units and interpretation for this scalar value using the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetFrequencySettlingUnits(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXFrequencySettlingUnits)"/> method.
            <note type="note">
               This method is not supported if you are using an external LO.
            </note>
            <para>
               <format type="bold">Supported devices</format>: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5830/5831/5832/5840/5841/5842/5860
            </para>
         </summary>
         <param name="channelName">Identifies the channel to which the settings must be applied. Specify an empty string as the value of this parameter.</param>
         <param name="value"> Upon return, contains the value used for LO frequency settling.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetChannelCoupling(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXChannelCoupling@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetChannelCoupling" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXChannelCoupling" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the RF IN connector is AC- or DC-coupled on the downconverter.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains whether the RF IN connector is AC- or DC-coupled on the downconverter. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ChannelCoupling" crefType="PartiallyQualified" /> attribute.The default value is  AC Coupled.Valid valuesPXIe-5665 (3.6 GHz): AC Coupled DC CoupledPXIe-5665 (14 GHz): AC Coupled, DC CoupledPXIe-5668: AC CoupledSupported devices: PXIe-5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetChannelCoupling(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXChannelCoupling)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetChannelCoupling" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXChannelCoupling" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the RF IN connector is AC- or DC-coupled on the downconverter.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies whether the RF IN connector is AC- or DC-coupled on the downconverter. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.ChannelCoupling" crefType="PartiallyQualified" /> attribute.The default value is  AC Coupled.Valid valuesPXIe-5665 (3.6 GHz): AC Coupled DC CoupledPXIe-5665 (14 GHz): AC Coupled, DC CoupledPXIe-5668: AC CoupledSupported devices: PXIe-5665/5668
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetPreampEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPreampEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetPreampEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXPreampEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the RF preamplifier is enabled in the system.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains whether the RF preamplifier is enabled in the system.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.PreampEnabled" crefType="PartiallyQualified" /> attribute. The default value for PXIe-5644/5645/5646 and PXIe-5830/5831/5832/5840/5841/5842/5860 is Automatic, else the default value is Disabled.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetPreampEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPreampEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetPreampEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXPreampEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the RF preamplifier is enabled in the system.
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies whether the RF preamplifier is enabled in the system.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.PreampEnabled" crefType="PartiallyQualified" /> attribute.The default value foor PXIe-5644/5645/5646 and PXIe-5830/5831/5832/5840/5841/5842/5860 is Automatic, else the default value is Disabled.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLOInjectionSide(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOInjectionSide@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetLOInjectionSide" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOInjectionSide" nireturnvaluetype="System.Int32">

         <summary>
            Enables in-band retuning and specifies the current frequency of the RF downconverter. This value is expressed in Hz.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Enables in-band retuning and specifies the current frequency of the RF downconverter. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOInjectionSide" crefType="PartiallyQualified" /> attribute.The default value is the carrier frequency or spectrum center frequency. Valid Values: Any supported tuning frequency of the devicePXIe-5820: The only valid value for this property is 0 Hz. Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOSource(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetLOSource" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the LO signal source used to downconvert the RF input signal.
         </summary>
         <param name="channelName">
            Specifies the losource number.<br /> Example: "losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the LO signal source used to downconvert the RF input signal.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOSource" crefType="PartiallyQualified" /> attribute.The default value is RFMXINSTR_VAL_LO_SOURCE_ONBOARD. Supported Devices: PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLOSource(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetLOSource" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the LO signal source used to downconvert the RF input signal.
         </summary>
         <param name="channelName">
            Specifies the losource number.<br /> Example: "losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the LO signal source used to downconvert the RF input signal.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOSource" crefType="PartiallyQualified" /> attribute.The default value is RFMXINSTR_VAL_LO_SOURCE_ONBOARD. Supported Devices: PXIe-5644/5645/5646, PXIe-5830/5831/5832/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetLOFrequency" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the LO signal frequency for the configured center frequency. This value is expressed in Hz.
         </summary>
         <param name="channelName">
            Specifies the losource number.<br /> Example: "losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the LO signal frequency for the configured center frequency. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOFrequency" crefType="PartiallyQualified" /> attribute.The default value is 0.Supported Devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLOFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetLOFrequency" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the LO signal frequency for the configured center frequency. This value is expressed in Hz.
         </summary>
         <param name="channelName">
            Specifies the losource number.<br /> Example: "losource0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildLOString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the LO signal frequency for the configured center frequency. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOFrequency" crefType="PartiallyQualified" /> attribute.The default value is 0.Supported Devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOInjectionSide(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOInjectionSide)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetLOInjectionSide" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOInjectionSide" nireturnvaluetype="System.Int32">

         <summary>
            Enables in-band retuning and specifies the current frequency of the RF downconverter. This value is expressed in Hz.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Enables in-band retuning and specifies the current frequency of the RF downconverter. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOInjectionSide" crefType="PartiallyQualified" /> attribute.The default value is the carrier frequency or spectrum center frequency. Valid Values: Any supported tuning frequency of the devicePXIe-5820: The only valid value for this property is 0 Hz.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDigitizerDitherEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXDigitizerDitherEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetDigitizerDitherEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXDigitizerDitherEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether dithering is enabled on the digitizer.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains whether dithering is enabled on the digitizer.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DigitizerDitherEnabled" crefType="PartiallyQualified" /> attribute.The default value is Enabled. Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842. For PXIe-5820/5830/5831/5832/5840/5841/5842, only Enabled is supported.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetDigitizerDitherEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXDigitizerDitherEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetDigitizerDitherEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXDigitizerDitherEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether dithering is enabled on the digitizer.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies whether dithering is enabled on the digitizer.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DigitizerDitherEnabled" crefType="PartiallyQualified" /> attribute.The default value is  Enabled. Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842. For PXIe-5820/5830/5831/5832/5840/5841/5842, only Enabled is supported.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetOspDelayEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXOspDelayEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetOspDelayEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXOspDelayEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the digitizer OSP block to delay Reference Triggers, along with the data samples, moving through the OSP block.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains whether to enable the digitizer OSP block to delay Reference Triggers, along with the data samples, moving through the OSP block. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.OspDelayEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOspDelayEnabled.Enabled" crefType="PartiallyQualified" />. Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetOspDelayEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXOspDelayEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetOspDelayEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXOspDelayEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the digitizer OSP block to delay Reference Triggers, along with the data samples, moving through the OSP block.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies whether to enable the digitizer OSP block to delay Reference Triggers, along with the data samples, moving through the OSP block. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.OspDelayEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOspDelayEnabled.Enabled" crefType="PartiallyQualified" />. Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDownconverterPreselectorEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXDownconverterPreselectorEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetDownconverterPreselectorEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXDownconverterPreselectorEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the tunable preselector is enabled on the downconverter.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains whether the tunable preselector is enabled on the downconverter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DownconverterPreselectorEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXDownconverterPreselectorEnabled.Disabled" crefType="PartiallyQualified" />. Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetDownconverterPreselectorEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXDownconverterPreselectorEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetDownconverterPreselectorEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXDownconverterPreselectorEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the tunable preselector is enabled on the downconverter.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies whether the tunable preselector is enabled on the downconverter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DownconverterPreselectorEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXDownconverterPreselectorEnabled.Disabled" crefType="PartiallyQualified" />.Supported devices: PXIe-5663/5663E/5665/5668, PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetCleanerSpectrum(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXCleanerSpectrum@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetCleanerSpectrum" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXCleanerSpectrum" nireturnvaluetype="System.Int32">

         <summary>
            Gets how to obtain the lowest noise floor or faster measurement speed.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains how to obtain the lowest noise floor or faster measurement speed.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.CleanerSpectrum" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXCleanerSpectrum.Disabled" crefType="PartiallyQualified" />.Supported devices: PXIe-5665, PXIe-5668, PXIe-5644/5645/5646, PXIe-5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetCleanerSpectrum(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXCleanerSpectrum)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetCleanerSpectrum" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXCleanerSpectrum" nireturnvaluetype="System.Int32">

         <summary>
            Sets how to obtain the lowest noise floor or faster measurement speed.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies how to obtain the lowest noise floor or faster measurement speed.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.CleanerSpectrum" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXCleanerSpectrum.Disabled" crefType="PartiallyQualified" />.Supported devices: PXIe-5665, PXIe-5668, PXIe-5644/5645/5646, PXIe-5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetSubSpanOverlap(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetSubSpanOverlap" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering silly.For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this method returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering silly.For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this method returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SubSpanOverlap" crefType="PartiallyQualified" /> attribute.The default value is 0.Valid values PXIe-5820/5830/5831/5832/5840/5841/5860 is 0 .Valid values PXIe-5842 is 0, 50.Valid values PXIe-5665/5668 0 to 100.Supported devices: PXIe-5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetSubSpanOverlap(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetSubSpanOverlap" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering silly.For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this method returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering silly.For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this method returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.SubSpanOverlap" crefType="PartiallyQualified" /> attribute.The default value is 0.Valid values PXIe-5820/5830/5831/5832/5840/5841/5860 is 0 .Valid values PXIe-5842 is 0, 50.Valid values PXIe-5665/5668 0 to 100.Supported devices: PXIe-5665/5668, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDownconverterGain(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetDownconverterGain" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the net signal gain for the device at the current RFmx settings and temperature. RFmx scales the acquired I/Q and spectrum data from the digitizer using the value of this method.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the net signal gain for the device at the current RFmx settings and temperature. RFmx scales the acquired I/Q and spectrum data from the digitizer using the value of this method.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DownconverterGain" crefType="PartiallyQualified" /> attribute.The default value is N/A.Supported devices: PXIe-5644/5645/5646, PXIe-5663/5663E/5665/5668, PXIe-5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRecommendedIQMeasurementBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRecommendedIQMeasurementBandwidth" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="channelName">missing content</param>
         <param name="value">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetDownconverterFrequencyOffset(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetDownconverterFrequencyOffset" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets an offset from the center frequency value for the downconverter. Use this method to offset the measurement away from the LO leakage or DC Offset of analyzers that use a direct conversion architecture.  You must set this method to half the bandwidth or span of the measurement + guardband. The guardband is needed to ensure that the LO leakage is not inside the analog or digital filter rolloffs.  This value is expressed in Hz.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains an offset from the center frequency value for the downconverter. Use this method to offset the measurement away from the LO leakage or DC Offset of analyzers that use a direct conversion architecture.  You must set this method to half the bandwidth or span of the measurement + guardband. The guardband is needed to ensure that the LO leakage is not inside the analog or digital filter rolloffs.  This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DownconverterFrequencyOffset" crefType="PartiallyQualified" /> attribute.Default values: For spectrum acquisition types, RFmx automatically calculates the default value to avoid residual LO power. For I/Q acquisition types, the default value is 0 Hz. If the center frequency is set to a non-multiple of LO Frequency Step Size property, this property is set to compensate for the difference. Supported Devices: PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842. The following valid values correspond to their respective devices:PXIe-5646-100 MHz to +100 MHz PXIe-5830/5831/5832/5840/5841/5842-500 MHz to +500 MHz Other devices-42 MHz to +42 MHz
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetDownconverterFrequencyOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetDownconverterFrequencyOffset" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets an offset from the center frequency value for the downconverter. Use this method to offset the measurement away from the LO leakage or DC Offset of analyzers that use a direct conversion architecture.  You must set this method to half the bandwidth or span of the measurement + guardband. The guardband is needed to ensure that the LO leakage is not inside the analog or digital filter rolloffs.  This value is expressed in Hz.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies an offset from the center frequency value for the downconverter. Use this method to offset the measurement away from the LO leakage or DC Offset of analyzers that use a direct conversion architecture.  You must set this method to half the bandwidth or span of the measurement + guardband. The guardband is needed to ensure that the LO leakage is not inside the analog or digital filter rolloffs.  This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.DownconverterFrequencyOffset" crefType="PartiallyQualified" /> attribute.Default values: For spectrum acquisition types, RFmx automatically calculates the default value to avoid residual LO power. For I/Q acquisition types, the default value is 0 Hz. If the center frequency is set to a non-multiple of LO Frequency Step Size property, this property is set to compensate for the difference.Supported Devices: PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842. The following valid values correspond to their respective devices: PXIe-5646 -100 MHz to +100 MHz PXIe-5830/5831/5832/5840/5841/5842 -500 MHz to +500 MHz Other devices -42 MHz to +42 MHz
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRFAttenuationStepSize(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetRFAttenuationStepSize" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the step size for the RF attenuation level. This value is expressed in dB. The actual RF attenuation is coerced up to the next highest multiple of the specified step size. If the mechanical attenuators are not available to implement the coerced RF attenuation, the solid state attenuators are used.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the step size for the RF attenuation level. This value is expressed in dB. The actual RF attenuation is coerced up to the next highest multiple of the specified step size. If the mechanical attenuators are not available to implement the coerced RF attenuation, the solid state attenuators are used. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFAttenuationStepSize" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663, PXIe-5665, PXIe-5668Default values:PXIe-5601/5663/5663E0.0PXIe-5603/5665 (3.6 GHz)1.0PXIe-5605/5665 (14 GHz), PXIe-5606/56685.0Valid values: PXIe-5601/5663/5663E0.0 to 93.0, continuousPXIe-5603/5665 (3.6 GHz)1.0 to 74.0, in 1 dB stepsPXIe-5605/5665 (14 GHz) (low band), PXIe-5606/5668 (low band)1.0 to 106.0, in 1 dB stepsPXIe-5605/5665 (14 GHz) (high band), PXIe-5606/5668 (high band)5.0 to 75.0, in 5 dB steps
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetRFAttenuationStepSize(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetRFAttenuationStepSize" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the step size for the RF attenuation level. This value is expressed in dB. The actual RF attenuation is coerced up to the next highest multiple of the specified step size. If the mechanical attenuators are not available to implement the coerced RF attenuation, the solid state attenuators are used.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies the step size for the RF attenuation level. This value is expressed in dB. The actual RF attenuation is coerced up to the next highest multiple of the specified step size. If the mechanical attenuators are not available to implement the coerced RF attenuation, the solid state attenuators are used. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.RFAttenuationStepSize" crefType="PartiallyQualified" /> attribute.Supported devices: PXIe-5663, PXIe-5665, PXIe-5668Default values:PXIe-5601/5663/5663E0.0PXIe-5603/5665 (3.6 GHz)1.0PXIe-5605/5665 (14 GHz), PXIe-5606/56685.0Valid values: PXIe-5601/5663/5663E0.0 to 93.0, continuousPXIe-5603/5665 (3.6 GHz)1.0 to 74.0, in 1 dB stepsPXIe-5605/5665 (14 GHz) (low band), PXIe-5606/5668 (low band)1.0 to 106.0, in 1 dB stepsPXIe-5605/5665 (14 GHz) (high band), PXIe-5606/5668 (high band)5.0 to 75.0, in 5 dB steps
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLOLeakageAvoidanceEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOLeakageAvoidanceEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetLOLeakageAvoidanceEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOLeakageAvoidanceEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to reduce the effects of the instrument leakage by placing the LO outside the band of acquisition.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains whether to reduce the effects of the instrument leakage by placing the LO outside the band of acquisition.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOLeakageAvoidanceEnabled" crefType="PartiallyQualified" /> attribute.The default value foor PXIe-5830/5831/5832/5840/5841/5842 is True, else the default value is False. Supported devices: PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLOLeakageAvoidanceEnabled(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOLeakageAvoidanceEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetLOLeakageAvoidanceEnabled" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOLeakageAvoidanceEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to reduce the effects of the instrument leakage by placing the LO outside the band of acquisition.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Specifies whether to reduce the effects of the instrument leakage by placing the LO outside the band of acquisition.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LOLeakageAvoidanceEnabled" crefType="PartiallyQualified" /> attribute.The default value foor PXIe-5830/5831/5832/5840/5841/5842 is True, else the default value is False. Supported devices: PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetAmplitudeSettling(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetAmplitudeSettling" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the amplitude settling accuracy value. This value is expressed in decibels. RFmx waits until the RF power attains the specified accuracy level after calling the RFmx Initiate function.
         </summary>
         <param name="channelName">Pass an empty string.</param>
         <param name="value">Upon return, contains the amplitude settling accuracy value. This value is expressed in decibels. RFmx waits until the RF power attains the specified accuracy level after calling the RFmx Initiate function.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.AmplitudeSettling" crefType="PartiallyQualified" /> attribute. Supported Devices: PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetAmplitudeSettling(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SetAmplitudeSettling" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the amplitude settling accuracy value. This value is expressed in decibels. RFmx waits until the RF power attains
            the specified accuracy level after calling the RFmx Initiate method.
            Any specified amplitude settling value that is above the acceptable minimum value is coerced down to the closest valid
            value.
            <para>
               <format type="bold">Supported Devices:</format> PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5840/5841/5842/5860
            </para>
         </summary>
         <param name="channelName">
            Identifies the channel to which the settings must be applied. Specify an empty string as the value of this parameter.
         </param>
         <param name="value">Specifies the the amplitude settling accuracy value. This value is expressed in decibels.</param>
         <returns>
            Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
         </returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetError(System.Int32@,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetError" nihasget="0" nihasset="0" niparameters="errorCode,errorDescription" niparametertypes="out System.Int32,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the latest error code and description.
         </summary>
         <param name="errorCode">Upon return, contains the latest error code.</param>
         <param name="errorDescription">Upon return, contains the latest error description.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetWarning(System.Int32@,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetWarning" nihasget="0" nihasset="0" niparameters="warningCode,warningDescription" niparametertypes="out System.Int32,out System.String" nireturnvaluetype="System.Int32">

         <summary>Gets the latest warning code and description.</summary>
         <param name="warningCode">Upon return, contains the latest warning code.</param>
         <param name="warningDescription">Upon return, contains the latest warning description.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetErrorString(System.Int32,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GetErrorString" nihasget="0" nihasset="0" niparameters="errorCode,errorDescription" niparametertypes="System.Int32,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Converts the status code returned by an RFmxInstr function into a string.
         </summary>
         <param name="errorCode">Specifies an error or warning code.</param>
         <param name="errorDescription">Upon return, contains the error description.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ConfigureFrequencyReference(System.String,System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFrequencyReference" nihasget="0" nihasset="0" niparameters="channelName,frequencyReferenceSource,frequencyReferenceFrequency" niparametertypes="System.String,System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the Reference Clock and the frequency reference source. <br />
         </summary>
         <param name="channelName">Identifies the channel to which the settings must be applied. Specify an empty string as the value of this parameter.</param>
         <param name="frequencyReferenceSource">
            Specifies the frequency reference source. <br />

            The default value for PXIe-5840 with PXIe-5653 is <em>refIn2</em>, else the default value is <em>onboardClock</em>.<br />
         </param>
         <param name="frequencyReferenceFrequency">
            Specifies the Reference Clock rate when the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetFrequencyReferenceSource(System.String,System.String)"/> method is set to <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.ClockIn"/> or <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.ReferenceIn"/>. This value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ConfigureMechanicalAttenuation(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXMechanicalAttenuationAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMechanicalAttenuation" nihasget="0" nihasset="0" niparameters="channelName,mechanicalAttenuationAuto,mechanicalAttenuationValue" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXMechanicalAttenuationAuto,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the mechanical attenuation and RFmx attenuation hardware settings.<br /><em>supporteddevices:</em> PXIe-5663/5663E, PXIe-5665, PXIe-5668<br />
         </summary>
         <param name="channelName">Identifies the channel to which the settings must be applied. Specify an empty string as the value of this parameter.</param>
         <param name="mechanicalAttenuationAuto">
            Specifies whether RFmx automatically chooses an attenuation setting based on the hardware settings. <br />
         </param>
         <param name="mechanicalAttenuationValue">Specifies the level of mechanical attenuation for the RF path. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ConfigureRFAttenuation(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXRFAttenuationAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRFAttenuation" nihasget="0" nihasset="0" niparameters="channelName,attenuationAuto,attenuationValue" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXRFAttenuationAuto,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the nominal attenuation and RFmx setting. <br /><em>supporteddevices:</em> PXIe-5663/5663E, PXIe-5665, PXIe-5668<br />
         </summary>
         <param name="channelName">Identifies the channel to which the settings must be applied. Specify an empty string as the value of this parameter.</param>
         <param name="attenuationAuto">Specifies whether RFmx computes the RF attenuation.</param>
         <param name="attenuationValue">Specifies the nominal attenuation setting for all attenuators before the first mixer in the RF signal chain. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.ResetToDefault" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ResetToDefault" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">

         <summary>
            Resets the RFmxInstr methods to their default values.<br />
            This method disables all the calibration planes.<br />
         </summary>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="P:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.NumberOfSignalConfigurations" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="NumberOfSignalConfigurations" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of signal configurations created in the current session.
         </summary>
         <value>Specifies the number of signal configurations created.</value>

      </member>
      <member name="P:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.NumberOfLists" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="NumberOfLists" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of lists created in the current session.
         </summary>
         <value>Specifies the number of lists created.</value>

      </member>
      <member name="P:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.IsDisposed" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="IsDisposed" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">

         <summary>
            Gets a value that indicates whether the signal has been disposed.
         </summary>
         <value>
            <see langword="true" /> if the session is disposed; otherwise,  <see langword="false" />.
         </value>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXConstants" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies constants for I/O terminals.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.None" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The Reference Clock is not exported. This value is not valid for the PXIe-5644/5645/5646.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.OnboardClock" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="OnboardClock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            <para>
               PXIe-5663/5663E: RFmx locks the PXIe-5663/5663E to the PXIe-5652 LO source onboard clock. Connect the REF OUT2 connector (if it exists) on the PXIe-5652 to the PXIe-5622 CLK IN terminal. On versions of the PXIe-5663/5663E that lack a REF OUT2 connector on the PXIe-5652, connect the REF IN/OUT connector on the PXIe-5652 to the PXIe-5622 CLK IN terminal.
            </para>
            <para>
               PXIe-5665: RFmx locks the PXIe-5665 to the PXIe-5653 LO source onboard clock. Connect the 100 MHz REF OUT terminal on the PXIe-5653 to the PXIe-5622 CLK IN terminal.
            </para>
            <para>PXIe-5668: Lock the PXIe-5668 to the PXIe-5653 LO SOURCE onboard clock. Connect the LO2 OUT connector on the PXIe-5606 to the CLK IN connector on the PXIe-5624.</para>
            <para>
               PXIe-5644/5645/5646, PXIe-5820/5840/5841/5842/5860: RFmx locks the device to its onboard clock.
            </para>
            <para>
               PXIe-5830/5831/5832: For the PXIe-5830, connect the PXIe-5820 REF IN connector to the PXIe-3621 REF OUT connector. For the PXIe-5831, connect the PXIe-5820 REF IN connector to the PXIe-3622 REF OUT connector. For the PXIe-5832, connect the PXIe-5820 REF IN connector to the PXIe-3623 REF OUT connector.
            </para>
            <para>
               PXIe-5831 with PXIe-5653: Connect the PXIe-5820 REF IN connector to the PXIe-3622 REF OUT connector. Connect the PXIe-5653 REF OUT (10 MHz) connector to the PXIe-3622 REF IN connector.
            </para>
            <para>
               PXIe-5832 with PXIe-5653: Connect the PXIe-5820 REF IN connector to the PXIe-3623 REF OUT connector. Connect the PXIe-5653 REF OUT (10 MHz) connector to the PXIe-3623 REF IN connector.
            </para>
            <para>
               PXIe-5840 with PXIe-5653: Lock onto the PXIe-5653 onboard clock. Connect the REF OUT (10 MHz) connector on the PXIe-5653 to the PXIe-5840 REF IN connector. Configure open NI-RFSG sessions to the device to use <format type="bold">ReferenceIn</format> for PXIe-5840 or <format type="bold">ReferenceIn2</format> for the PXIe-5840 with the PXIe-5653.
            </para>
			  <para>
               PXIe-5860: Lock to the PXIe-5860 onboard clock.
            </para>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.ReferenceIn" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReferenceIn" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            PXIe-5663/5663E: Connect the external signal to the PXIe-5652 REF IN/OUT connector. Connect the REF OUT2 connector (if it exists) on the PXIe-5652 to the PXIe-5622 CLK IN terminal.
            <para>
               PXIe-5665: Connect the external signal to the PXIe-5653 REF IN connector. Connect the 100 MHz REF OUT terminal on the PXIe-5653 to the PXIe-5622 CLK IN connector. If your external clock signal frequency is set to a frequency other than 10 MHz, set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetFrequencyReferenceFrequency(System.String,System.Double)"/> method according to the frequency of your external clock signal.
            </para>
            <para>
               PXIe-5668: Connect the external signal to the PXIe-5653 REF IN connector. Connect the LO2 OUT on the PXIe-5606 to the CLK IN connector on the PXIe-5622. If your external clock signal frequency is set to a frequency other than 10 MHz, set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetFrequencyReferenceFrequency(System.String,System.Double)"/> method according to the frequency of your external clock signal.
            </para>
            PXIe-5644/5645/5646, PXIe-5820/5840/5841/5842/5860: RFmx locks the device to the signal at the external REF IN connector.
            <para>
               PXIe-5830/5831/5832: For PXIe-5830, connect the PXIe-5820 REF IN connector to the PXIe-3621 REF OUT connector. For PXIe-5831, connect the PXIe-5820 REF IN connector to the PXIe-3622 REF OUT connector. For PXIe-5832, connect the PXIe-5820 REF IN connector to the PXIe-3623 REF OUT connector. For PXIe-5830, lock the external signal to the PXIe-3621 REF IN connector. For PXIe-5831, lock the external signal to the PXIe-3622 REF IN connector. For PXIe-5832, lock the external signal to the PXIe-3623 REF IN connector.
            </para>
            <para>
               PXIe-5831 with PXIe-5653: Connect the PXIe-5820 REF IN connector to the PXIe-3622 REF OUT connector. Connect the PXIe-5653 REF OUT (10 MHz) connector to the PXIe-3622 REF IN connector. Lock the external signal to the PXIe-5653 REF IN connector.
            </para>
            <para>
               PXIe-5832 with PXIe-5653: Connect the PXIe-5820 REF IN connector to the PXIe-3623 REF OUT connector. Connect the PXIe-5653 REF OUT (10 MHz) connector to the PXIe-3623 REF IN connector. Lock the external signal to the PXIe-5653 REF IN connector.
            </para>
            <para>
               PXIe-5840 with PXIe-5653: Lock to the signal at the REF IN connector on the associated PXIe-5653. Connect the REF OUT (10 MHz) connector on the PXIe-5653 to the PXIe-5840 REF IN connector.
            </para>
			<para>
              PXIe-5860:Lock to the signal at the REF IN connector on the PXIe-5860.
            </para>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.PxiClock" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PxiClock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
           <para>
             PXIe-5668: Lock the PXIe-5653 to the PXI backplane clock. Connect the PXIe-5606 LO2 OUT to the LO2 IN connector on the PXIe-5624. 
            </para>
			<para>
           PXIe-5644/5645/5646, PXIe-5663/5663E/5665, and PXIe-5820/5840/5841/5860: The RFmx driver locks the device to the PXI backplane clock.
            </para>
			<para>
            PXIe-5830/5831/5832 with PXIe-5653/5841 with PXIe-5655, PXIe-5842/5860: The RFmx driver locks the device to the PXI backplane clock. Cables between modules are required as shown in the Getting Started Guide for the instrument.
            </para>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.ClockIn" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ClockIn" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            PXIe-5663/5663E: RFmx locks the PXIe-5663/5663E to an external 10 MHz signal. Connect the external signal to the PXIe-5622 CLK IN connector, and connect the PXIe-5622 CLK OUT connector to the FREQ REF IN connector on the PXIe-5652.
            <para>
               PXIe-5665: RFmx locks the PXIe-5665 to an external 100 MHz signal. Connect the external signal to the PXIe-5622 CLK IN connector, and connect the PXIe-5622 CLK OUT connector to the REF IN connector on the PXIe-5653. Set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetFrequencyReferenceFrequency(System.String,System.Double)"/> method to 100 MHz.
            </para>
            <para>
               PXIe-5668: Lock the PXIe-5668 to an external 100 MHz signal. Connect the external signal to the CLK IN connector on the PXIe-5624, and connect the PXIe-5624 CLK OUT connector to the REF IN connector on the PXIe-5653. Set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetFrequencyReferenceFrequency(System.String,System.Double)"/> method
               to 100 MHz.
            </para>
            <para>PXIe-5644/5645/5646, PXIe-5820/5830/5831/5831 with PXIe-5653/5832/5832 with PXIe-5653/5840/5841/5842/5840/5841/5842/5860 with PXIe-5653: This configuration does not apply.</para>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.ReferenceIn2" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReferenceIn2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            <para>PXIe-5840 with PXIe-5653: RFmx locks the reference clock to the clock sourced at the PXIe-5840 REF IN terminal that is previously configured by an NI-RFSG session. Connect the NI-5840 REF OUT connector to the PXIe-5653 REF IN connector.</para>
            <para>
               Configure open NI-RFSG sessions to the device to use <format type="bold">ReferenceIn</format> for the PXIe-5840 or <format type="bold">OnboardClock</format> for the PXIe-5840 with PXIe-5653.
            </para>
            <para>PXIe-5663/5663E/5665/5668, PXIe-5644/5645/5646, and PXIe-5820/5830/5831/5831 with PXIe-5653/5832/5832 with PXIe-5653/5840/5841/5842/5860: This configuration does not apply.</para>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.PxiClockMaster" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PxiClockMaster" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            <para>
               PXIe-5831 with PXIe-5653: RFmx configures the PXIe-5653 to export the reference clock and configures the PXIe-5820 and PXIe-3622 to use <format type="bold">PXI_Clock</format> as the reference clock source. You must connect the PXIe-5653 REF OUT (10 MHz) connector to the PXI chassis REF IN connector.
            </para>
            <para>
               PXIe-5832 with PXIe-5653: RFmx configures the PXIe-5653 to export the reference clock and configures the PXIe-5820 and PXIe-3623 to use <format type="bold">PXI_Clock</format> as the reference clock source. You must connect the PXIe-5653 REF OUT (10 MHz) connector to the PXI chassis REF IN connector.
            </para>
            <para>
               PXIe-5840 with PXIe-5653: RFmx configures the PXIe-5653 to export the reference clock, and configures the PXIe-5840 to use <format type="bold">PXI_Clock</format>. For best performance, configure all other devices in the system to use <format type="bold">PXI_Clk</format> as the reference clock source. You must connect the PXIe-5653 REF OUT (10 MHz) connector to the PXIe-5840 REF IN connector for this configuration.
            </para>
            <para>PXIe-5663/5663E/5665/5668, PXIe-5644/5645/5646, PXIe-5820/5830/5831/5832/5840/5841/5842/5860: This configuration does not apply.</para>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.ReferenceOut" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReferenceOut" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Export the clock on the REF IN/OUT terminal on the PXIe-5652, the REF OUT terminals on the PXIe-5653, or the REF OUT terminal on the PXIe-5694, PXIe-5644/5645/5646, or PXIe-5820/5830/5831/5832/5840/5841/5842/5860.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.ReferenceOut2" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReferenceOut2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Export the clock on the REF OUT2 terminal on the PXIe-5652. This value is valid only for the PXIe-5663E.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.ClockOut" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ClockOut" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Export the Reference Clock on the CLK OUT terminal on the digitizer. This value is not valid for the PXIe-5644/5645/5646 or PXIe-5820/5830/5831/5832/5840/5841/5842/5860.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.DoNotExportSignal" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DoNotExportSignal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies that the signal should not be exported.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.Pfi0" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Pfi0" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PFI 0.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.Pfi1" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Pfi1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI 1.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.PxiTriggerLine0" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine0" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 0.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.PxiTriggerLine1" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 1.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.PxiTriggerLine2" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 2.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.PxiTriggerLine3" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine3" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 3.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.PxiTriggerLine4" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 4.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.PxiTriggerLine5" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 5.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.PxiTriggerLine6" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine6" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 6.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.PxiTriggerLine7" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine7" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 7.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.PxiStarLine" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PxiStarLine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI star trigger line.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.LOSourceNone" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOSourceNone" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies that no LO source is required to downconvert the RF input signal.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.LOSourceOnboard" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOSourceOnboard" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies that the onboard synthesizer is used to generate the LO signal that downconverts the RF input signal.
            <para>PXIe-5831: This configuration uses the onboard LO of the PXIe-3622, using the LO2 stage. </para>
            <para>PXIe-5832: This configuration uses the onboard LO of the PXIe-3623, using the LO2 stage. </para>
            <para>PXIe-5831 with PXIe-5653: This configuration uses the onboard LO of the PXIe-5653 when associated with the PXIe-3622.</para>
            <para>PXIe-5832 with PXIe-5653: This configuration uses the onboard LO of the PXIe-5653 when associated with the PXIe-3623.</para>
            <para>PXIe-5840 with PXIe-5653: If the center frequency is greater than or equal to 3.2 GHz, this configuration uses the PXIe-5653 LO source. For frequencies less than 3.2 GHz, this configuration uses the PXIe-5840 internal LO. If RFmx is operating in Spectrum mode, this configuration uses the PXIe-5840 internal LO irrespective of the frequency.</para>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.LOSourceLOIn" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOSourceLOIn" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies that the LO source used to downconvert the RF input signal is connected to the LO IN connector on the front panel.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.LOSourceSecondary" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOSourceSecondary" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies that the LO source uses the PXIe-5830/5831/5832/5840 internal LO. This value is valid on only the PXIe-5840 with PXIe-5653, PXIe-5831 with PXIe-5653 (LO1 stage only), PXIe-5832 with PXIe-5653 (LO1 stage only).
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.LOSourceSGSAShared" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOSourceSGSAShared" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies that the internal LO can be shared between RFmx and RFSG sessions. RFmx selects an internal synthesizer and the synthesizer signal is switched to both the RX and TX mixers. This value is valid only on the PXIe-5830/5831/5832/5841/5842.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.LOSourceAutomaticSGSAShared" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOSourceAutomaticSGSAShared" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            <para>
               Specifies that RFmx automatically configures the signal analyzer to use the LO utilized by the signal generator on the same vector signal transceiver (VST) based on the configured measurements.
            </para>
            <para>
               When using instruments that do not have LOs with excellent phase noise and to minimize the contribution of the instrument's phase noise affecting your measurements, NI recommends to share the LO between the signal generator (SG) and the signal analyzer (SA).
               This value is recommended in test setups that use a VST with NI-RFSG to generate a signal at the DUT's input and RFmx to measure the signal at the DUT's output.
            </para>
            <para>
               This value automatically:
               determines whether the SG LO can be shared with SA based on the test instrument used, selected measurement, and the measurement settings.
               configures instrument specific properties on SA to share the LO between the generator and analyzer, whenever possible.
            </para>
            <para>
               To enable automatically sharing SG LO with SA, you must first setup the required device specific physical connections mentioned below and then follow the steps in the recommended order.
            </para>
            <para>
               PXIe-5840/5841/5842: SG LO is shared with SA via an external path. Hence, you must connect RF Out LO Out to RF In LO In using a cable.
            </para>
            <para>
               PXIe-5830/5831/5832: SG LO is shared with SA via an internal path. Hence, an external cable connection is not required.
            </para>
            <para>NI recommends the following order of steps:</para>
            Set LO Source property to Automatic SG SA Shared in NI-RFSG (or enable Automatic SG SA shared LO on NI-RFSG Playback Library).
            Set LO Source property to <format type="bold">Automatic_SG_SA_Shared</format> in RFmx.
            Configure any additional settings on RFSG and RFmx, including selecting waveforms.
            Initiate RFSG.
            Initiate RFmx.<br/>
            <note>
               When using a DPD applied signal for performing measurements like ModAcc, PvT, or TXP, you must set the LO Leakage Avoidance Enabled property to <format type="bold">False</format> and LO Source property to <format type="bold">Automatic_SG_SA_Shared</format>.
            </note>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.PxieDStarBLine" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PxieDStarBLine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXIe DStar B trigger line. This value is valid only for PXIe-5820/5830/5831/5832/5840/5841/5842/5860.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.PxieDStarCLine" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PxieDStarCLine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXIe DStar C trigger line. This value is valid only for PXIe-5820/5830/5831/5832/5840/5841/5842/5860.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXConstants.TimerEvent" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="TimerEvent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The trigger is received from the timer event. This value is valid only for PXIe-5820/5840/5841/5842/5860 and for digital edge advance triggers on PXIe-5663E/5665.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXExportSignalSource" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXExportSignalSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Routes signals (triggers, clocks, and events) to the specified output terminal.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXExportSignalSource.StartTrigger" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="StartTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Start trigger is sourced.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXExportSignalSource.ReferenceTrigger" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReferenceTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Reference trigger event is sourced.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXExportSignalSource.AdvanceTrigger" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="AdvanceTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Advance trigger event is sourced.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXExportSignalSource.ReadyForStartEvent" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReadyForStartEvent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Ready For Start Event is sourced.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXExportSignalSource.ReadyForReferenceEvent" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReadyForReferenceEvent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Ready For Reference Event is sourced.</summary>
      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXExportSignalSource.ReadyForAdvanceEvent" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReadyForAdvanceEvent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Ready For Advance Event is sourced.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXExportSignalSource.EndOfRecordEvent" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="EndOfRecordEvent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>End Of Record Event is sourced.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXExportSignalSource.DoneEvent" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DoneEvent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Done Event is sourced.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXExportSignalSource.ReferenceClock" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ReferenceClock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Reference Clock is sourced.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRFAttenuationAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXRFAttenuationAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether RFmx computes the RF attenuation.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRFAttenuationAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that RFmx uses the value configured using RF Attenuation Value  method.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRFAttenuationAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that RFmx computes the RF attenuation.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXMechanicalAttenuationAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXMechanicalAttenuationAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether RFmx chooses an attenuation setting based on the hardware settings.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXMechanicalAttenuationAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that RFmx uses the value configured in the Mechanical Attenuation Value method.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXMechanicalAttenuationAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that the measurement computes the mechanical attenuation.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXSelfCalibrateSteps" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the self-calibration step.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            A value of None specifies that all calibration steps are performed.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps.PreselectorAlignment" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="PreselectorAlignment" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Selects/Omits the Preselector Alignment self-calibration step.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps.GainReference" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="GainReference" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Selects/Omits the Gain Reference self-calibration step.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps.IFFlatness" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="IFFlatness" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Selects/Omits the IF Flatness self-calibration step.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps.DigitizerSelfcal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DigitizerSelfcal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Selects/Omits the Digitizer Self Cal self-calibration step.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps.LOSelfCal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LOSelfCal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Selects/Omits the LO Self Cal self-calibration step.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps.AmplitudeAccuracy" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="AmplitudeAccuracy" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Selects/Omits the Amplitude Accuracy self-calibration step.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps.ResidualLOPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ResidualLOPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Selects/Omits the Residual LO Power self-calibration step.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps.ImageSuppression" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ImageSuppression" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Selects/Omits the Image Suppression self-calibration step.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps.SynthesizerAlignment" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SynthesizerAlignment" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Selects/Omits the Synthesizer Alignment self-calibration step.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrateSteps.DCOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DCOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Selects/Omits the DC Offset self-calibration step.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrationValidityCheck" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXSelfCalibrationValidityCheck" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether RFmx validates the self-calibration data.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrationValidityCheck.Off" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Off" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Indicates that RFmx does not check whether device self-calibration data is valid.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSelfCalibrationValidityCheck.Enabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Enabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Indicates that RFmx checks whether device self-calibration data is valid and reports a warning from the RFmx Commit and RFmx Initiate functions when the data is invalid.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXSignalConfigurationState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>
            missing content
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState.Unknown" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Unknown" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState.Invalid" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Invalid" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState.Valid" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Valid" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState.Unconfigured" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Unconfigured" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState.Uncommitted" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Uncommitted" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState.CommitInProgress" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="CommitInProgress" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState.CommittedNoError" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="CommittedNoError" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState.CommittedError" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="CommittedError" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState.InitiateInProgress" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="InitiateInProgress" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState.InitiatedNoError" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="InitiatedNoError" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState.InitiatedError" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="InitiatedError" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSignalConfigurationState.Verified" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Verified" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterOrientation" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXSParameterOrientation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the orientation of the data in the S2P file relative to the port you specify. The default value is Port2TowardsDut.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterOrientation.Port1TowardsDut" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Port1TowardsDut" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Port 1 of the S2P is oriented towards the DUT.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterOrientation.Port2TowardsDut" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Port2TowardsDut" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Port 2 of the S2P is oriented towards the DUT.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXSParameterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            <para>Returns the type of S-parameter to apply to measurements on the specified port for a Calplane. You can use the selectorString input to specify the name of the Calplane and port to configure for s-parameter. </para>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            De-embeds the measurement using the gain term.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXSParameterType.Vector" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Vector" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            De-embeds the measurement using the gain term and the reflection term.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerDigitalEdge" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXStartTriggerDigitalEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the active edge for the start trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerType(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerDigitalEdge.Rising" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The trigger asserts on the rising edge of the signal.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerDigitalEdge.Falling" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The trigger asserts on the falling edge of the signal.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXStartTriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the start trigger is a digital edge or a software trigger.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            No start trigger is configured.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.DigitalEdge" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DigitalEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The start trigger is not asserted until a digital edge is detected. The source of the digital edge is specified by the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetStartTriggerDigitalEdgeSource(System.String,System.String)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXStartTriggerType.Software" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Software" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The start trigger is not asserted until a software trigger occurs. You can assert the software trigger by calling the RFmxInstr_SendSoftwareEdgeTrigger function.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXTerminalConfiguration" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>
            missing content
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXTerminalConfiguration.SingleEnded" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SingleEnded" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXTuningSpeed" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXTuningSpeed" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Makes tradeoffs between tuning speed and phase noise.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXTuningSpeed.Normal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Normal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            PXIe-5665/5668: Adjusts the YIG main coil on the LO for an underdamped response.
            PXIe-5663/5663E/5644/5645/5646: Specifies that the RF downconverter module uses a narrow loop bandwidth.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXTuningSpeed.Medium" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Medium" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies that the RF downconverter module uses a medium loop bandwidth. This value is not supported on PXIe-5663/5663E/5665/5668 devices.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXTuningSpeed.Fast" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Fast" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            PXIe-5665/5668: Adjusts the YIG main coil on the LO for an overdamped response. Setting this method to Fast allows the frequency to settle significantly faster for some frequency transitions at the expense of increased phase noise.
            PXIe-5663/5663E/5644/5645/5646: Specifies that the RF downconverter module uses a wide loop bandwidth.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXFrequencySettlingUnits" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXFrequencySettlingUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the delay duration units and interpretation for LO settling.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXFrequencySettlingUnits.Ppm" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Ppm" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the frequency settling in parts per million (ppm).</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXFrequencySettlingUnits.SecondsAfterLock" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SecondsAfterLock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the frequency settling in time after lock (seconds).</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXFrequencySettlingUnits.SecondsAfterIO" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="SecondsAfterIO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the frequency settling in time after I/O (seconds).</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXChannelCoupling" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXChannelCoupling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the RF IN connector is AC- or DC-coupled on the downconverter.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXChannelCoupling.ACCoupled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="ACCoupled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the RF IN connector is AC- or DC-coupled on the downconverter. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXChannelCoupling.DCCoupled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="DCCoupled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that the RF input channel is DC-coupled. RFmx enforces a minimum RF attenuation for device protection.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPreampEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXPreampEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the RF preamplifier is enabled in the system.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPreampEnabled.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Disables the RF preamplifier. Supported Devices: PXIe-5663/5663E/5665/5668</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPreampEnabled.Enabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Enabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Enables the RF preamplifier when it is in the signal path and disables it when it is not in the signal path. Only devices with an RF preamplifier on the downconverter and an RF preselector support this option. Use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetRFPreampPresent(System.String,System.Boolean@)" crefType="FullyQualified" />  method to determine whether the downconverter has a preamplifier.
            Supported Devices: PXIe-5663/5663E/5665/5668
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPreampEnabled.Automatic" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Automatic" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Automatically enables the RF preamplifier based on the value of the reference level. Supported Devices: PXIe-5644/5645/5646, PXIe-5830/5831/5832/5840/5841/5842/5860</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedSpectralFftWindow" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXRecommendedSpectralFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the recommended FFT window type for spectral acquisition. This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this method.<br/>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedSpectralFftWindow.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the measurement does not use FFT windowing to reduce spectral leakage.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedSpectralFftWindow.FlatTop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="FlatTop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates a Flat Top FFT window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedSpectralFftWindow.Hanning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Hanning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates a Hanning FFT window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedSpectralFftWindow.Hamming" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Hamming" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates a Hamming FFT window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedSpectralFftWindow.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates a Gaussian FFT window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedSpectralFftWindow.Blackman" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Blackman" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates a Blackman FFT window type. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedSpectralFftWindow.BlackmanHarris" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="BlackmanHarris" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates a Blackman-Harris FFT window type. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedSpectralFftWindow.KaiserBessel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="KaiserBessel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates a Kaiser-Bessel FFT window type. </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedAcquisitionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXRecommendedAcquisitionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the recommended acquisition type for the last committed measurement configuration. This method is supported when <br/>
         1. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String,System.String)" crefType="FullyQualified" /> is called with option string "AnalysisOnly=1".<br/>
         2. <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.#ctor(System.String[],System.String)" crefType="FullyQualified" /> is called with option string 'AnalysisOnly=1;MaxNumWfms:n'. Use 'instr(n)' as the selector string to read this method.<br/>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedAcquisitionType.IQ" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="IQ" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the recommended acquisition type is I/Q. Use the Analyze (IQ) function to perform the measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedAcquisitionType.Spectral" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Spectral" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the recommended acquisition type is Spectral. Use Analyze (Spectrum) function to perform the measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXRecommendedAcquisitionType.IQOrSpectral" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="IQOrSpectral" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the recommended acquisition type is I/Q or Spectral. Use either Analyze (IQ) or Analyze (Spectrum) function to perform the measurement.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOInjectionSide" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXLOInjectionSide" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Enables in-band retuning and specifies the current frequency of the RF downconverter. This value is expressed in Hz.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOInjectionSide.HighSide" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="HighSide" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Configures the LO signal that the device generates at a frequency higher than the RF signal. This LO frequency is given by the following formula: <em>fLO = fRF + fIF</em>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLOInjectionSide.LowSide" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="LowSide" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Configures the LO signal that the device generates at a frequency lower than the RF signal. This LO frequency is given by the following formula: <em>fLO = fRF – fIF</em>
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXDigitizerDitherEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXDigitizerDitherEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether dithering is enabled on the digitizer.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXDigitizerDitherEnabled.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Disables the method.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXDigitizerDitherEnabled.Enabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Enabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Enables the method.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOspDelayEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXOspDelayEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to enable the digitizer OSP block to delay Reference Triggers, along with the data samples, moving through the OSP block.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOspDelayEnabled.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Disables the method.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXOspDelayEnabled.Enabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Enabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Enables the method.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXCleanerSpectrum" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXCleanerSpectrum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies how to obtain the lowest noise floor or faster measurement speed.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXCleanerSpectrum.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Disable this method to get faster measurement speed.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXCleanerSpectrum.Enabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Enabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Enable this method to get the lowest noise floor and avoid digitizer spurs.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXDownconverterPreselectorEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXDownconverterPreselectorEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the tunable preselector is enabled on the downconverter.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXDownconverterPreselectorEnabled.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Disables the preselector.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXDownconverterPreselectorEnabled.Enabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/3/2020 8:46:47 PM" niupdatedby="Sebastius" nidisplayname="Enabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The preselector is automatically enabled when it is in the signal path and is automatically disabled when it is not in the signal path. Use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetPreselectorPresent(System.String,System.Boolean@)" crefType="FullyQualified" /> method to determine if the downconverter has a preselector.
         </summary>

      </member>
          <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.LoadConfigurations(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="15-03-2024 12.54.30 PM" niupdatedby="Sebastius" nidisplayname="LoadConfigurations" nihasget="0" nihasset="0" niparameters="filePath" niparametertypes="System.String" nireturnvaluetype="System.Int32">
   
         <summary>
            Loads the methods of an RFmx session saved in a file. This file can be generated using <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SaveAllConfigurations(System.String)" crefType="FullyQualified" /> method or the RF Signal Analyzer panel in InstrumentStudio.
			You can specify the configurations to skip while loading from a file using the <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LoadOptions" crefType="PartiallyQualified" /> property. <br />
            If the file contains a named signal configuration which is already present in the session, then this method will return an error. It is recommended to call the RFmxInstr Reset Entire Session method to delete all the named signal configurations in the session.
         </summary>
         <param name="filePath">
            Specifies the complete path to the file from which the configurations are to be loaded.
				Default file extension: .rfmxconfig<br />
         </param>
        
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
   </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetLoadOptions(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLoadOptions[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="15-03-2024 12.54.30 PM" niupdatedby="Sebastius" nidisplayname="GetLoadOptions" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,ref NationalInstruments.RFmx.InstrMX.RFmxInstrMXLoadOptions[]" nireturnvaluetype="System.Int32">
         <summary>
           Specifies the configurations to skip while loading from a file using the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.LoadConfigurations(System.String)" crefType="FullyQualified" /> method <br/>    </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the configurations to skip while loading from a file using the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.LoadConfigurations(System.String)" crefType="FullyQualified" /> method <br/></param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LoadOptions" crefType="PartiallyQualified" /> attribute.
         </remarks>

       </member>
    <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.SetLoadOptions(System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLoadOptions[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="15-03-2024 12.54.30 PM" niupdatedby="Sebastius" nidisplayname="SetLoadOptions" nihasget="0" nihasset="0" niparameters="channelName,value" niparametertypes="System.String,NationalInstruments.RFmx.InstrMX.RFmxInstrMXLoadOptions[]" nireturnvaluetype="System.Int32">
     
         <summary>
       Specifies the configurations to skip while loading from a file using the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.LoadConfigurations(System.String)" crefType="FullyQualified" /> method <br/>
         </summary>
         <param name="channelName">
            Specifies the port number.<br /> Example: "port0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.BuildPortString2(System.String,System.String,System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the configurations to skip while loading from a file using the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.LoadConfigurations(System.String)" crefType="FullyQualified" /> method <br/></param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LoadOptions" crefType="PartiallyQualified" /> attribute.
         </remarks>

     </member>
    <member name="T:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLoadOptions" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="15-03-2024 12.54.30 PM" niupdatedby="Sebastius" nidisplayname="RFmxInstrMXLoadOptions" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
   
         <summary>
            Specifies the configurations to skip while loading from a file using the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.LoadConfigurations(System.String)" crefType="FullyQualified" /> method <br/>
         </summary>

   </member>
    <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLoadOptions.SkipNone" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="15-03-2024 12.54.30 PM" niupdatedby="Sebastius" nidisplayname="SkipNone" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
    
         <summary>RFmx loads all the configurations to the session. </summary>

      </member>
    <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXLoadOptions.SkipRFInstr" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="15-03-2024 12.54.30 PM" niupdatedby="Sebastius" nidisplayname="SkipRFInstr" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
   
         <summary>RFmx skips loading the RFmxInstr configurations to the session. </summary>

      </member>
       <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.LoadOptions" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="15-03-2024 12.54.30 PM" niupdatedby="Sebastius" nidisplayname="LoadOptions" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
            Specifies the configurations to skip while loading from a file using the <see cref="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.LoadConfigurations(System.String)" crefType="FullyQualified" /> method <br/>
      </summary>
    </member>
    <member name="M:NationalInstruments.RFmx.InstrMX.RFmxInstrMX.GetNumberOfRawIQRecords(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="20-05-2024 11.11.21 AM" niupdatedby="Sebastius" nidisplayname="GetNumberOfRawIQRecords" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
            Gets the number of raw IQ records to acquire to complete measurement averaging.
         </summary>
         <param name="selectorString">Pass an empty string.</param>
         <param name="value">Gets the number of raw IQ records to acquire to complete measurement averaging. This property returns a value of 0 when RFmx cannot provide I/Q data for the specified measurement configuration.    </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.NumberOfRawIQRecords" crefType="PartiallyQualified" /> 
         </remarks>

    </member>
	    <member name="F:NationalInstruments.RFmx.InstrMX.RFmxInstrMXPropertyId.NumberOfRawIQRecords" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="20-05-2024 11.11.21 AM" niupdatedby="Sebastius" nidisplayname="NumberOfRawIQRecords" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
     <summary>
             Gets the number of raw IQ records to acquire to complete measurement averaging.
      </summary>
    </member>
   </members>
</doc>